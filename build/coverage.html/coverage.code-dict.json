{"/home/travis/build/npmtest/node-npmtest-node-outlook/test.js":"/* istanbul instrument in package npmtest_node_outlook */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-outlook/lib.npmtest_node_outlook.js":"/* istanbul instrument in package npmtest_node_outlook */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_outlook = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_outlook = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-outlook/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-outlook && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_outlook */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_outlook\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_outlook.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_outlook.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_outlook.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_outlook.__dirname + '/lib.npmtest_node_outlook.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/index.js":"// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license at the bottom of this file.\r\nvar fs = require(\"fs\");\r\nvar path = require(\"path\");\r\nvar XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\r\n\r\nvar currentDirectory = path.dirname(fs.realpathSync(__filename));\r\n\r\nexchangefile = fs.readFileSync(path.join(currentDirectory, './exchange-lib/exchange.js'), 'utf8');\r\neval(exchangefile);\r\nutilityfile = fs.readFileSync(path.join(currentDirectory, './exchange-lib/utility.js'), 'utf8');\r\neval(utilityfile);\r\n\r\nexports.Microsoft = Microsoft;\r\nexports.base = require('./version-2.js');\r\nexports.mail = require('./mail-api.js');\r\nexports.calendar = require('./calendar-api.js');\r\nexports.contacts = require('./contacts-api.js');\r\n\r\n/*\r\n  MIT License: \r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining \r\n  a copy of this software and associated documentation files (the \r\n  \"\"Software\"\"), to deal in the Software without restriction, including \r\n  without limitation the rights to use, copy, modify, merge, publish, \r\n  distribute, sublicense, and/or sell copies of the Software, and to \r\n  permit persons to whom the Software is furnished to do so, subject to \r\n  the following conditions: \r\n\r\n  The above copyright notice and this permission notice shall be \r\n  included in all copies or substantial portions of the Software. \r\n\r\n  THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND, \r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \r\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \r\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION \r\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION \r\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/version-2.js":"// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license at the bottom of this file.\r\nvar request = require('request');\r\nvar uuid = require('node-uuid');\r\nvar utilities = require('./utilities.js');\r\n\r\nvar fiddlerEnabled = false;\r\nvar traceFunction = undefined;\r\nvar endpoint = 'https://outlook.office.com/api/v1.0';\r\nvar defaultAnchor = '';\r\nvar defaultTimeZone = '';\r\n\r\n/**\r\n * @module base\r\n */\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Used to do the actual send of a REST request to the REST endpoint.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.url {string} The full URL of the API endpoint\r\n   * @param parameters.token {string} The access token for authentication\r\n   * @param [parameters.user.email] {string} The user's SMTP email address, used to set the `X-AnchorMailbox` header.\r\n   * @param [parameters.user.timezone] {string} The user's time zone, used to set the `outlook.timezone` `Prefer` header.\r\n   * @param [parameters.method] {string} Used to specify the HTTP method. Default is 'GET'.\r\n   * @param [parameters.query] {object} An object containing key/value pairs. The pairs will be serialized into a query string.\r\n   * @param [parameters.payload] {object} A JSON-serializable object representing the request body.\r\n   * @param [parameters.headers] {object} A JSON-serializable object representing custom headers to send with the request.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   */\r\n  makeApiCall: function (parameters, callback) {\r\n    // Check required parameters\r\n    if (parameters.url === undefined || parameters.token === undefined) {\r\n      trace('makeApiCall - ERROR: Missing required parameter');\r\n      if (typeof callback === 'function') {\r\n        callback('ERROR: You must include the \\'url\\' and \\'token\\' parameters.');\r\n      }\r\n      return;\r\n    }\r\n    \r\n    var method = parameters.method === undefined ? 'GET' : parameters.method;\r\n    \r\n    trace('url: ' + parameters.url);\r\n    trace('token: ' + parameters.token);\r\n    trace('method: ' + method);\r\n    \r\n    var auth = {\r\n      'bearer': parameters.token\r\n    };\r\n\r\n    var headers = parameters.headers || {};\r\n    headers['Accept'] = headers['Accept'] || 'application/json';\r\n    headers['User-Agent'] = headers['User-Agent'] || 'node-outlook/2.0';\r\n    headers['client-request-id'] = headers['client-request-id'] || uuid.v4();\r\n    headers['return-client-request-id'] = headers['return-client-request-id'] || 'true';\r\n    \r\n    // Determine if we have an anchor mailbox to use\r\n    // Passed parameter has greater priority than module-level default\r\n    var anchorMbx = '';\r\n    if (parameters.user && parameters.user.email && parameters.user.email.length > 0) {\r\n      anchorMbx = parameters.user.email;\r\n    }\r\n    else {\r\n      anchorMbx = defaultAnchor;\r\n    }\r\n    \r\n    if (anchorMbx.length > 0) {\r\n      headers['X-Anchor-Mailbox'] = anchorMbx;\r\n    }\r\n    \r\n    // Determine if we have a time zone to use\r\n    // Passed parameter has greater priority than module-level default\r\n    var timezone = '';\r\n    if (parameters.user && parameters.user.timezone && parameters.user.timezone.length > 0) {\r\n      timezone = parameters.user.timezone;\r\n    }\r\n    else {\r\n      timezone = defaultTimeZone;\r\n    }\r\n    \r\n    if (timezone.length > 0) {\r\n      headers['Prefer'] = headers['Prefer'] || [];\r\n      headers['Prefer'].push('outlook.timezone = \"' + timezone + '\"');\r\n    }\r\n\r\n    var options = {\r\n      method: method,\r\n      url: parameters.url,\r\n      headers: headers,\r\n      auth: auth,\r\n      json: true\r\n    };\r\n    \r\n    if (parameters.query !== undefined) {\r\n      trace('query:' + JSON.stringify(parameters.query));\r\n      options['qs'] = parameters.query;\r\n    }\r\n    \r\n    if (fiddlerEnabled) {\r\n      options['proxy'] = 'http://127.0.0.1:8888';\r\n      options['strictSSL'] = false;\r\n    }\r\n    \r\n    if (method.toUpperCase() === 'POST' || method.toUpperCase() === 'PATCH') {\r\n      if (parameters.payload !== undefined) {\r\n        trace('payload:' + JSON.stringify(parameters.payload));\r\n      }\r\n      options['body'] = parameters.payload;\r\n    }\r\n    \r\n    request(options, function(error, response, body) {\r\n      if (typeof callback === 'function') {\r\n        callback(error, response);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Used to get information about a user.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'DisplayName, EmailAddress',\r\n   * };\r\n   * \r\n   * outlook.base.getUser({token: token, odataParams: queryParams},\r\n   *   function(error, result) {\r\n   *     if (error) {\r\n   *       console.log('getUser returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('User name:', result.DisplayName);\r\n   *       console.log('User email:', result.EmailAddress);\r\n   *     }\r\n   *   });\r\n   */\r\n  getUser: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n\r\n    var requestUrl = this.apiEndpoint() + userSpec;\r\n\r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n\r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n\r\n    this.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Used to provide a tracing function.\r\n   * \r\n   * @param traceFunc {function} A function that takes a string parameter. The string parameter contains the text to add to the trace.\r\n   */\r\n  setTraceFunc: function(traceFunc) {\r\n    traceFunction = traceFunc;\r\n  },\r\n  \r\n  /**\r\n   * Used to enable network sniffing with Fiddler.\r\n   * \r\n   * @param enabled {boolean} `true` to enable default Fiddler proxy and disable SSL verification. `false` to disable proxy and enable SSL verification.\r\n   */\r\n  setFiddlerEnabled: function(enabled) {\r\n    fiddlerEnabled = enabled;\r\n  },\r\n  \r\n  /**\r\n   * Gets the API endpoint URL.\r\n   * @return {string}\r\n   */\r\n  apiEndpoint: function() {\r\n    return endpoint;\r\n  },\r\n  \r\n  /**\r\n   * Sets the API endpoint URL. If not called, the default of `https://outlook.office.com/api/v1.0` is used.\r\n   * \r\n   * @param newEndPoint {string} The API endpoint URL to use.\r\n   */\r\n  setApiEndpoint: function(newEndPoint) {\r\n    endpoint = newEndPoint;\r\n  },\r\n  \r\n  /**\r\n   * Gets the default anchor mailbox address.\r\n   * @return {string}\r\n   */\r\n  anchorMailbox: function() {\r\n    return defaultAnchor;\r\n  },\r\n  \r\n  /**\r\n   * Sets the default anchor mailbox address.\r\n   * \r\n   * @param newAnchor {string} The SMTP address to send in the `X-Anchor-Mailbox` header.\r\n   */\r\n  setAnchorMailbox: function(newAnchor) {\r\n    defaultAnchor = newAnchor;\r\n  },\r\n  \r\n  /**\r\n   * Gets the default preferred time zone.\r\n   * @return {string}\r\n   */\r\n  preferredTimeZone: function() {\r\n    return defaultTimeZone;\r\n  },\r\n  \r\n  /**\r\n   * Sets the default preferred time zone.\r\n   * \r\n   * @param preferredTimeZone {string} The time zone in which the server should return date time values.\r\n   */\r\n  setPreferredTimeZone: function(preferredTimeZone) {\r\n    defaultTimeZone = preferredTimeZone;\r\n  }\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction trace(message) {\r\n  if (typeof traceFunction === 'function') {\r\n    traceFunction(message);\r\n  }\r\n}\r\n\r\n/*\r\n  MIT License: \r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining \r\n  a copy of this software and associated documentation files (the \r\n  \"\"Software\"\"), to deal in the Software without restriction, including \r\n  without limitation the rights to use, copy, modify, merge, publish, \r\n  distribute, sublicense, and/or sell copies of the Software, and to \r\n  permit persons to whom the Software is furnished to do so, subject to \r\n  the following conditions: \r\n\r\n  The above copyright notice and this permission notice shall be \r\n  included in all copies or substantial portions of the Software. \r\n\r\n  THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND, \r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \r\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \r\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION \r\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION \r\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/utilities.js":"// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license at the bottom of this file.\r\n\r\nmodule.exports = {\r\n  useMeSegment: function(parameters) {\r\n    return parameters.useMe || parameters.user === undefined || parameters.user.email === undefined || parameters.user.email.length <= 0;\r\n  },\r\n  \r\n  getUserSegment: function(parameters) {\r\n    return this.useMeSegment(parameters) ? '/Me' : '/Users/' + parameters.user.email;\r\n  }\r\n}\r\n\r\n/*\r\n  MIT License:\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining\r\n  a copy of this software and associated documentation files (the\r\n  \"Software\"), to deal in the Software without restriction, including\r\n  without limitation the rights to use, copy, modify, merge, publish,\r\n  distribute, sublicense, and/or sell copies of the Software, and to\r\n  permit persons to whom the Software is furnished to do so, subject to\r\n  the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be\r\n  included in all copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/mail-api.js":"// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license at the bottom of this file.\r\nvar base = require('./version-2.js');\r\nvar utilities = require('./utilities.js');\r\n\r\n/**\r\n * @module mail\r\n */\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Used to get messages from a folder.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.folderId] {string} The folder id. If absent, the API calls the `/User/Messages` endpoint. Valid values of this parameter are:\r\n   * \r\n   * - The `Id` property of a `MailFolder` entity\r\n   * - `Inbox`\r\n   * - `Drafts`\r\n   * - `SentItems`\r\n   * - `DeletedItems`\r\n   * \r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'Subject,ReceivedDateTime,From',\r\n   *   '$orderby': 'ReceivedDateTime desc',\r\n   *   '$top': 20\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.getMessages({token: token, folderId: 'Inbox', odataParams: queryParams, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('getMessages returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('getMessages returned ' + result.value.length + ' messages.');\r\n   *       result.value.forEach(function(message) {\r\n   *         console.log('  Subject:', message.Subject);\r\n   *         console.log('  Received:', message.ReceivedDateTime.toString());\r\n   *         console.log('  From:', message.From ? message.From.EmailAddress.Name : 'EMPTY');\r\n   *       });\r\n   *     }\r\n   *   });\r\n   */\r\n  getMessages: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var folderSpec = parameters.folderId === undefined ? '' : getFolderSegment() + parameters.folderId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + folderSpec + '/Messages';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Used to get a specific message.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.messageId {string} The Id of the message.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the message to retrieve. This could be \r\n   * // from a previous call to getMessages\r\n   * var msgId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'Subject,ReceivedDateTime,From'\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.getMessage({token: token, messageId: msgId, odataParams: queryParams, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('getMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('  Subject:', result.Subject);\r\n   *       console.log('  Received:', result.ReceivedDateTime.toString());\r\n   *       console.log('  From:', result.From ? result.From.EmailAddress.Name : 'EMPTY');\r\n   *     }\r\n   *   });\r\n   */\r\n  getMessage: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Messages/' + parameters.messageId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Create a new message\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.message {object} The JSON-serializable message \r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.folderId] {string} The folder id. If absent, the API calls the `/User/Messages` endpoint.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * var newMsg = {\r\n   *   Subject: 'Did you see last night\\'s game?',\r\n   *   Importance: 'Low',\r\n   *   Body: {\r\n   *     ContentType: 'HTML',\r\n   *     Content: 'They were <b>awesome</b>!'\r\n   *   },\r\n   *   ToRecipients: [\r\n   *     {\r\n   *       EmailAddress: {\r\n   *         Address: 'azizh@contoso.com'\r\n   *       }\r\n   *     }\r\n   *   ]\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.createMessage({token: token, message: newMsg, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('createMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  createMessage: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var folderSpec = parameters.folderId === undefined ? '' : getFolderSegment() + parameters.folderId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + folderSpec + '/Messages';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: parameters.message,\r\n      method: 'POST'\r\n    };\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 201) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Update a specific message.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.messageId {string} The Id of the message.\r\n   * @param parameters.update {object} The JSON-serializable update payload \r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the message to update. This could be \r\n   * // from a previous call to getMessages\r\n   * var msgId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Mark the message unread\r\n   * var update = {\r\n   *   IsRead: false,\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.updateMessage({token: token, messageId: msgId, update: update, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('updateMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  updateMessage: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Messages/' + parameters.messageId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: parameters.update,\r\n      method: 'PATCH'\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Delete a specific message.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.messageId {string} The Id of the message.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the message to delete. This could be \r\n   * // from a previous call to getMessages\r\n   * var msgId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.deleteMessage({token: token, messageId: msgId, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('deleteMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('SUCCESS');\r\n   *     }\r\n   *   });\r\n   */\r\n  deleteMessage: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Messages/' + parameters.messageId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      method: 'DELETE'\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 204) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Sends a new message\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.message {object} The JSON-serializable message \r\n   * @param [parameters.saveToSentItems] {boolean} Set to false to bypass saving a copy to the Sent Items folder. Default is true.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * var newMsg = {\r\n   *   Subject: 'Did you see last night\\'s game?',\r\n   *   Importance: 'Low',\r\n   *   Body: {\r\n   *     ContentType: 'HTML',\r\n   *     Content: 'They were <b>awesome</b>!'\r\n   *   },\r\n   *   ToRecipients: [\r\n   *     {\r\n   *       EmailAddress: {\r\n   *         Address: 'azizh@contoso.com'\r\n   *       }\r\n   *     }\r\n   *   ]\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.sendNewMessage({token: token, message: newMsg, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('sendNewMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  sendNewMessage: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/sendmail';\r\n    \r\n    var payload = {\r\n      Message: parameters.message,\r\n      SaveToSentItems: parameters.saveToSentItems !== undefined ? parameters.saveToSentItems : 'true'\r\n    };\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: payload,\r\n      method: 'POST'\r\n    };\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 202) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Sends a draft message.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.messageId {string} The Id of the message.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the message to send. This could be \r\n   * // from a previous call to getMessages\r\n   * var msgId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.sendDraftMessage({token: token, messageId: msgId, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('sendDraftMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('SUCCESS');\r\n   *     }\r\n   *   });\r\n   */\r\n  sendDraftMessage: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Messages/' + parameters.messageId + '/send';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      method: 'POST'\r\n    };\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 202) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Syncs messages in a folder.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param [parameters.pageSize] {Number} The maximum number of results to return in each call. Defaults to 50. \r\n   * @param [parameters.skipToken] {string} The value to pass in the `skipToken` query parameter in the API call.\r\n   * @param [parameters.deltaToken] {string} The value to pass in the `deltaToken` query parameter in the API call.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.folderId] {string} The folder id. If absent, the API calls the `/User/Messages` endpoint. Valid values of this parameter are:\r\n   * \r\n   * - The `Id` property of a `MailFolder` entity\r\n   * - `Inbox`\r\n   * - `Drafts`\r\n   * - `SentItems`\r\n   * - `DeletedItems`\r\n   * \r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the beta endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/beta');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.mail.sendDraftMessage({token: token, messageId: msgId, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('sendDraftMessage returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('SUCCESS');\r\n   *     }\r\n   *   });\r\n   */\r\n  \r\n  syncMessages: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var folderSpec = parameters.folderId === undefined ? '' : getFolderSegment() + parameters.folderId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + folderSpec + '/Messages';\r\n    \r\n    var query = parameters.odataParams || {};\r\n    if (parameters.skipToken) {\r\n      query['$skiptoken'] = parameters.skipToken;\r\n    }\r\n    \r\n    if (parameters.deltaToken) {\r\n      query['$deltatoken'] = parameters.deltaToken;\r\n    }\r\n    \r\n    var headers = {\r\n      Prefer: [\r\n        'odata.track-changes',\r\n        'odata.maxpagesize=' + (parameters.pageSize === undefined ? '50' : parameters.pageSize.toString())\r\n      ]\r\n    };\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      query: query,\r\n      headers: headers\r\n    };\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Helper function to return the correct name for the folders segment\r\n * of the request URL. /Me/Folders became /Me/MailFolders in the beta and\r\n * 2.0 endpoints.\r\n * @private\r\n */\r\nvar getFolderSegment = function() {\r\n  if (base.apiEndpoint().toLowerCase().indexOf('/api/v1.0') > 0){\r\n    return '/Folders/';\r\n  }\r\n  \r\n  return '/MailFolders/'\r\n}\r\n\r\n/*\r\n  MIT License: \r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining \r\n  a copy of this software and associated documentation files (the \r\n  \"\"Software\"\"), to deal in the Software without restriction, including \r\n  without limitation the rights to use, copy, modify, merge, publish, \r\n  distribute, sublicense, and/or sell copies of the Software, and to \r\n  permit persons to whom the Software is furnished to do so, subject to \r\n  the following conditions: \r\n\r\n  The above copyright notice and this permission notice shall be \r\n  included in all copies or substantial portions of the Software. \r\n\r\n  THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND, \r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \r\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \r\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION \r\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION \r\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/calendar-api.js":"// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license at the bottom of this file.\r\nvar base = require('./version-2.js');\r\nvar utilities = require('./utilities.js');\r\n\r\n/**\r\n * @module calendar\r\n */\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Used to get events from a calendar.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.calendarId] {string} The calendar id. If absent, the API calls the `/User/Events` endpoint.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * \r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'Subject,Start,End',\r\n   *   '$orderby': 'Start/DateTime desc',\r\n   *   '$top': 20\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.calendar.getEvents({token: token, folderId: 'Inbox', odataParams: queryParams, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('getEvents returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('getEvents returned ' + result.value.length + ' events.');\r\n   *       result.value.forEach(function(event) {\r\n   *         console.log('  Subject:', event.Subject);\r\n   *         console.log('  Start:', event.Start.DateTime.toString());\r\n   *         console.log('  End:', event.End.DateTime.toString());\r\n   *       });\r\n   *     }\r\n   *   });\r\n   */\r\n  getEvents: function(parameters, callback){\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var calendarSpec = parameters.calendarId === undefined ? '' : '/Calendars/' + parameters.calendarId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + calendarSpec + '/Events';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Used to get a specific event.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.eventId {string} The Id of the event.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the event to retrieve. This could be \r\n   * // from a previous call to getEvents\r\n   * var eventId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'Subject,Start,End'\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.calendar.getEvent({token: token, eventId: eventId, odataParams: queryParams, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('getEvent returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('  Subject:', result.Subject);\r\n   *       console.log('  Start:', result.Start.DateTime.toString());\r\n   *       console.log('  End:', result.End.DateTime.toString());\r\n   *     }\r\n   *   });\r\n   */\r\n  getEvent: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Events/' + parameters.eventId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Create a new event\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.event {object} The JSON-serializable event \r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.calendarId] {string} The calendar id. If absent, the API calls the `/User/Events` endpoint.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * var newEvent = {\r\n   *   \"Subject\": \"Discuss the Calendar REST API\",\r\n   *   \"Body\": {\r\n   *     \"ContentType\": \"HTML\",\r\n   *     \"Content\": \"I think it will meet our requirements!\"\r\n   *   },\r\n   *   \"Start\": {\r\n   *     \"DateTime\": \"2016-02-03T18:00:00\",\r\n   *     \"TimeZone\": \"Eastern Standard Time\"\r\n   *   },\r\n   *   \"End\": {\r\n   *     \"DateTime\": \"2016-02-03T19:00:00\",\r\n   *     \"TimeZone\": \"Eastern Standard Time\"\r\n   *   },\r\n   *   \"Attendees\": [\r\n   *     {\r\n   *       \"EmailAddress\": {\r\n   *         \"Address\": \"allieb@contoso.com\",\r\n   *         \"Name\": \"Allie Bellew\"\r\n   *       },\r\n   *       \"Type\": \"Required\"\r\n   *     }\r\n   *   ]\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.calendar.createEvent({token: token, event: newEvent, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('createEvent returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  createEvent: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var calendarSpec = parameters.calendarId === undefined ? '' : '/Calendars/' + parameters.calendarId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + calendarSpec + '/Events';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: parameters.event,\r\n      method: 'POST'\r\n    };\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 201) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Update a specific event.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.eventId {string} The Id of the event.\r\n   * @param parameters.update {object} The JSON-serializable update payload \r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the event to update. This could be \r\n   * // from a previous call to getEvents\r\n   * var eventId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Update the location\r\n   * var update = {\r\n   *   Location: {\r\n   *     DisplayName: 'Conference Room 2'\r\n   *   }\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.calendar.updateEvent({token: token, eventId: eventId, update: update, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('updateEvent returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  updateEvent: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Events/' + parameters.eventId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: parameters.update,\r\n      method: 'PATCH'\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Delete a specific event.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.eventId {string} The Id of the event.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the event to delete. This could be \r\n   * // from a previous call to getEvents\r\n   * var eventId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.calendar.deleteEvent({token: token, eventId: eventId, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('deleteEvent returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('SUCCESS');\r\n   *     }\r\n   *   });\r\n   */\r\n  deleteEvent: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Events/' + parameters.eventId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      method: 'DELETE'\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 204) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/*\r\n  MIT License: \r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining \r\n  a copy of this software and associated documentation files (the \r\n  \"\"Software\"\"), to deal in the Software without restriction, including \r\n  without limitation the rights to use, copy, modify, merge, publish, \r\n  distribute, sublicense, and/or sell copies of the Software, and to \r\n  permit persons to whom the Software is furnished to do so, subject to \r\n  the following conditions: \r\n\r\n  The above copyright notice and this permission notice shall be \r\n  included in all copies or substantial portions of the Software. \r\n\r\n  THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND, \r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \r\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \r\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION \r\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION \r\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/contacts-api.js":"// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license at the bottom of this file.\r\n\r\nvar base = require('./version-2.js');\r\nvar utilities = require('./utilities.js');\r\n\r\n/**\r\n * @module contacts\r\n */\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Used to get contacts from a contact folder.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.contactFolderId] {string} The contact folder id. If absent, the API calls the `/User/Contacts` endpoint.\r\n   * \r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * \r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'GivenName,Surname,EmailAddresses',\r\n   *   '$orderby': 'CreatedDateTime desc',\r\n   *   '$top': 20\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.contacts.getContacts({token: token, odataParams: queryParams, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('getContacts returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('getContacts returned ' + result.value.length + ' contacts.');\r\n   *       result.value.forEach(function(contact) {\r\n   *         console.log('  GivenName:', contact.GivenName);\r\n   *         console.log('  Surname:', contact.Surname);\r\n   *         console.log('  Email Address:', contact.EmailAddresses[0] ? contact.EmailAddresses[0].Address : \"NONE\");\r\n   *       });\r\n   *     }\r\n   *   });\r\n   */\r\n  getContacts: function(parameters, callback){\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var contactFolderSpec = parameters.folderId === undefined ? '' : '/ContactFolders/' + parameters.folderId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + contactFolderSpec + '/Contacts';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Used to get a specific contact.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.contactId {string} The Id of the contact.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the contact to retrieve. This could be \r\n   * // from a previous call to getContacts\r\n   * var contactId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Set up oData parameters\r\n   * var queryParams = {\r\n   *   '$select': 'GivenName,Surname,EmailAddresses'\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.contacts.getContact({token: token, contactId: contactId, odataParams: queryParams, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('getContact returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('  GivenName:', result.GivenName);\r\n   *       console.log('  Surname:', result.Surname);\r\n   *       console.log('  Email Address:', result.EmailAddresses[0] ? result.EmailAddresses[0].Address : \"NONE\");\r\n   *     }\r\n   *   });\r\n   */\r\n  getContact: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Contacts/' + parameters.contactId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Create a new contact\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.contact {object} The JSON-serializable contact \r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.contactFolderId] {string} The contact folder id. If absent, the API calls the `/User/Contacts` endpoint.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * var newContact = {\r\n   *   \"GivenName\": \"Pavel\",\r\n   *   \"Surname\": \"Bansky\",\r\n   *   \"EmailAddresses\": [\r\n   *     {\r\n   *       \"Address\": \"pavelb@contoso.com\",\r\n   *       \"Name\": \"Pavel Bansky\"\r\n   *     }\r\n   *   ],\r\n   *   \"BusinessPhones\": [\r\n   *     \"+1 732 555 0102\"\r\n   *   ]\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.contacts.createContact({token: token, contact: newContact, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('createContact returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  createContact: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    var folderSpec = parameters.folderId === undefined ? '' : '/ContactFolders/' + parameters.folderId;\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + folderSpec + '/Contacts';\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: parameters.contact,\r\n      method: 'POST'\r\n    };\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 201) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Update a specific contact.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.contactId {string} The Id of the contact.\r\n   * @param parameters.update {object} The JSON-serializable update payload \r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [parameters.odataParams] {object} An object containing key/value pairs representing OData query parameters. See [Use OData query parameters]{@link https://msdn.microsoft.com/office/office365/APi/complex-types-for-mail-contacts-calendar#UseODataqueryparameters} for details.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the contact to update. This could be \r\n   * // from a previous call to getContacts\r\n   * var contactId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Change the mobile number\r\n   * var update = {\r\n   *   MobilePhone1: '425-555-1212',\r\n   * };\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.contacts.updateContact({token: token, contactId: contactId, update: update, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('updateContact returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log(JSON.stringify(result, null, 2));\r\n   *     }\r\n   *   });\r\n   */\r\n  updateContact: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Contacts/' + parameters.contactId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      payload: parameters.update,\r\n      method: 'PATCH'\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 200) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Delete a specific contact.\r\n   * \r\n   * @param parameters {object} An object containing all of the relevant parameters. Possible values:\r\n   * @param parameters.token {string} The access token.\r\n   * @param parameters.contactId {string} The Id of the contact.\r\n   * @param [parameters.useMe] {boolean} If true, use the `/Me` segment instead of the `/Users/<email>` segment. This parameter defaults to false and is ignored if the `parameters.user.email` parameter isn't provided (the `/Me` segment is always used in this case).\r\n   * @param [parameters.user.email] {string} The SMTP address of the user. If absent, the `/Me` segment is used in the API URL.\r\n   * @param [parameters.user.timezone] {string} The timezone of the user.\r\n   * @param [callback] {function} A callback function that is called when the function completes. It should have the signature `function (error, result)`.\r\n   * \r\n   * @example var outlook = require('node-outlook');\r\n   * \r\n   * // Set the API endpoint to use the v2.0 endpoint\r\n   * outlook.base.setApiEndpoint('https://outlook.office.com/api/v2.0');\r\n   * \r\n   * // This is the oAuth token \r\n   * var token = 'eyJ0eXAiOiJKV1Q...';\r\n   * \r\n   * // The Id property of the contact to delete. This could be \r\n   * // from a previous call to getContacts\r\n   * var contactId = 'AAMkADVhYTYwNzk...';\r\n   * \r\n   * // Pass the user's email address\r\n   * var userInfo = {\r\n   *   email: 'sarad@contoso.com'\r\n   * };\r\n   * \r\n   * outlook.contacts.deleteContact({token: token, contactId: contactId, user: userInfo},\r\n   *   function(error, result){\r\n   *     if (error) {\r\n   *       console.log('deleteContact returned an error: ' + error);\r\n   *     }\r\n   *     else if (result) {\r\n   *       console.log('SUCCESS');\r\n   *     }\r\n   *   });\r\n   */\r\n  deleteContact: function(parameters, callback) {\r\n    var userSpec = utilities.getUserSegment(parameters);\r\n    \r\n    var requestUrl = base.apiEndpoint() + userSpec + '/Contacts/' + parameters.contactId;\r\n    \r\n    var apiOptions = {\r\n      url: requestUrl,\r\n      token: parameters.token,\r\n      user: parameters.user,\r\n      method: 'DELETE'\r\n    };\r\n    \r\n    if (parameters.odataParams !== undefined) {\r\n      apiOptions['query'] = parameters.odataParams;\r\n    }\r\n    \r\n    base.makeApiCall(apiOptions, function(error, response) {\r\n      if (error) {\r\n        if (typeof callback === 'function') {\r\n          callback(error, response);\r\n        }\r\n      }\r\n      else if (response.statusCode !== 204) {\r\n        if (typeof callback === 'function') {\r\n          callback('REST request returned ' + response.statusCode + '; body: ' + JSON.stringify(response.body), response);\r\n        }\r\n      }\r\n      else {\r\n        if (typeof callback === 'function') {\r\n          callback(null, response.body);\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/*\r\n  MIT License:\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining\r\n  a copy of this software and associated documentation files (the\r\n  \"Software\"), to deal in the Software without restriction, including\r\n  without limitation the rights to use, copy, modify, merge, publish,\r\n  distribute, sublicense, and/or sell copies of the Software, and to\r\n  permit persons to whom the Software is furnished to do so, subject to\r\n  the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be\r\n  included in all copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/exchange-lib/exchange.js":"﻿//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    (function (OutlookServices) {\r\n        (function (Extensions) {\r\n            var ObservableBase = (function () {\r\n                function ObservableBase() {\r\n                    this._changedListeners = [];\r\n                }\r\n                Object.defineProperty(ObservableBase.prototype, \"changed\", {\r\n                    get: function () {\r\n                        return this._changed;\r\n                    },\r\n                    set: function (value) {\r\n                        var _this = this;\r\n                        this._changed = value;\r\n                        this._changedListeners.forEach((function (value, index, array) {\r\n                            try  {\r\n                                value(_this);\r\n                            } catch (e) {\r\n                            }\r\n                        }).bind(this));\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                ObservableBase.prototype.addChangedListener = function (eventFn) {\r\n                    this._changedListeners.push(eventFn);\r\n                };\r\n\r\n                ObservableBase.prototype.removeChangedListener = function (eventFn) {\r\n                    var index = this._changedListeners.indexOf(eventFn);\r\n                    if (index >= 0) {\r\n                        this._changedListeners.splice(index, 1);\r\n                    }\r\n                };\r\n                return ObservableBase;\r\n            })();\r\n            Extensions.ObservableBase = ObservableBase;\r\n\r\n            var ObservableCollection = (function (_super) {\r\n                __extends(ObservableCollection, _super);\r\n                function ObservableCollection() {\r\n                    var items = [];\r\n                    for (var _i = 0; _i < (arguments.length - 0); _i++) {\r\n                        items[_i] = arguments[_i + 0];\r\n                    }\r\n                    var _this = this;\r\n                    _super.call(this);\r\n                    this._changedListener = (function (changed) {\r\n                        _this.changed = true;\r\n                    }).bind(this);\r\n                    this._array = items;\r\n                }\r\n                ObservableCollection.prototype.item = function (n) {\r\n                    return this._array[n];\r\n                };\r\n\r\n                /**\r\n                * Removes the last element from an array and returns it.\r\n                */\r\n                ObservableCollection.prototype.pop = function () {\r\n                    this.changed = true;\r\n                    var result = this._array.pop();\r\n                    result.removeChangedListener(this._changedListener);\r\n                    return result;\r\n                };\r\n\r\n                /**\r\n                * Removes the first element from an array and returns it.\r\n                */\r\n                ObservableCollection.prototype.shift = function () {\r\n                    this.changed = true;\r\n                    var result = this._array.shift();\r\n                    result.removeChangedListener(this._changedListener);\r\n                    return result;\r\n                };\r\n\r\n                /**\r\n                * Appends new elements to an array, and returns the new length of the array.\r\n                * @param items New elements of the Array.\r\n                */\r\n                ObservableCollection.prototype.push = function () {\r\n                    var _this = this;\r\n                    var items = [];\r\n                    for (var _i = 0; _i < (arguments.length - 0); _i++) {\r\n                        items[_i] = arguments[_i + 0];\r\n                    }\r\n                    items.forEach((function (value, index, array) {\r\n                        try  {\r\n                            value.addChangedListener(_this._changedListener);\r\n                            _this._array.push(value);\r\n                        } catch (e) {\r\n                        }\r\n                    }).bind(this));\r\n                    this.changed = true;\r\n                    return this._array.length;\r\n                };\r\n\r\n                /**\r\n                * Removes elements from an array, returning the deleted elements.\r\n                * @param start The zero-based location in the array from which to start removing elements.\r\n                * @param deleteCount The number of elements to remove.\r\n                * @param items Elements to insert into the array in place of the deleted elements.\r\n                */\r\n                ObservableCollection.prototype.splice = function (start, deleteCount) {\r\n                    var _this = this;\r\n                    var result = this._array.splice(start, deleteCount);\r\n                    result.forEach((function (value, index, array) {\r\n                        try  {\r\n                            value.removeChangedListener(_this._changedListener);\r\n                        } catch (e) {\r\n                        }\r\n                    }).bind(this));\r\n                    this.changed = true;\r\n                    return result;\r\n                };\r\n\r\n                /**\r\n                * Inserts new elements at the start of an array.\r\n                * @param items  Elements to insert at the start of the Array.\r\n                */\r\n                ObservableCollection.prototype.unshift = function () {\r\n                    var items = [];\r\n                    for (var _i = 0; _i < (arguments.length - 0); _i++) {\r\n                        items[_i] = arguments[_i + 0];\r\n                    }\r\n                    for (var index = items.length - 1; index >= 0; index--) {\r\n                        try  {\r\n                            items[index].addChangedListener(this._changedListener);\r\n                            this._array.unshift(items[index]);\r\n                        } catch (e) {\r\n                        }\r\n                    }\r\n                    this.changed = true;\r\n                    return this._array.length;\r\n                };\r\n\r\n                /**\r\n                * Performs the specified action for each element in an array.\r\n                * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n                * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n                */\r\n                ObservableCollection.prototype.forEach = function (callbackfn, thisArg) {\r\n                    this._array.forEach(callbackfn, thisArg);\r\n                };\r\n\r\n                /**\r\n                * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n                * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n                * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n                */\r\n                ObservableCollection.prototype.map = function (callbackfn, thisArg) {\r\n                    return this._array.map(callbackfn, thisArg);\r\n                };\r\n\r\n                /**\r\n                * Returns the elements of an array that meet the condition specified in a callback function.\r\n                * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n                * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n                */\r\n                ObservableCollection.prototype.filter = function (callbackfn, thisArg) {\r\n                    return this._array.filter(callbackfn, thisArg);\r\n                };\r\n\r\n                /**\r\n                * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n                * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n                * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n                */\r\n                ObservableCollection.prototype.reduce = function (callbackfn, initialValue) {\r\n                    return this._array.reduce(callbackfn, initialValue);\r\n                };\r\n\r\n                /**\r\n                * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n                * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n                * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n                */\r\n                ObservableCollection.prototype.reduceRight = function (callbackfn, initialValue) {\r\n                    return this._array.reduceRight(callbackfn, initialValue);\r\n                };\r\n\r\n                Object.defineProperty(ObservableCollection.prototype, \"length\", {\r\n                    /**\r\n                    * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n                    */\r\n                    get: function () {\r\n                        return this._array.length;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                return ObservableCollection;\r\n            })(ObservableBase);\r\n            Extensions.ObservableCollection = ObservableCollection;\r\n\r\n            var Request = (function () {\r\n                function Request(requestUri) {\r\n                    this.requestUri = requestUri;\r\n                    this.headers = {};\r\n                    this.disableCache = false;\r\n                }\r\n                return Request;\r\n            })();\r\n            Extensions.Request = Request;\r\n\r\n            var DataContext = (function () {\r\n                function DataContext(serviceRootUri, extraQueryParameters, getAccessTokenFn) {\r\n                    this._noCache = Date.now();\r\n                    this.serviceRootUri = serviceRootUri;\r\n                    this.extraQueryParameters = extraQueryParameters;\r\n                    this._getAccessTokenFn = getAccessTokenFn;\r\n                }\r\n                Object.defineProperty(DataContext.prototype, \"serviceRootUri\", {\r\n                    get: function () {\r\n                        return this._serviceRootUri;\r\n                    },\r\n                    set: function (value) {\r\n                        if (value.lastIndexOf(\"/\") === value.length - 1) {\r\n                            value = value.substring(0, value.length - 1);\r\n                        }\r\n\r\n                        this._serviceRootUri = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                Object.defineProperty(DataContext.prototype, \"extraQueryParameters\", {\r\n                    get: function () {\r\n                        return this._extraQueryParameters;\r\n                    },\r\n                    set: function (value) {\r\n                        this._extraQueryParameters = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                Object.defineProperty(DataContext.prototype, \"disableCache\", {\r\n                    get: function () {\r\n                        return this._disableCache;\r\n                    },\r\n                    set: function (value) {\r\n                        this._disableCache = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                Object.defineProperty(DataContext.prototype, \"disableCacheOverride\", {\r\n                    get: function () {\r\n                        return this._disableCacheOverride;\r\n                    },\r\n                    set: function (value) {\r\n                        this._disableCacheOverride = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                DataContext.prototype.ajax = function (request) {\r\n                    var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                    var xhr = new XMLHttpRequest();\r\n\r\n                    if (!request.method) {\r\n                        request.method = 'GET';\r\n                    }\r\n                    \r\n                    xhr.open(request.method.toUpperCase(), request.requestUri, true);\r\n\r\n                    if (request.headers) {\r\n                        for (name in request.headers) {\r\n                            xhr.setRequestHeader(name, request.headers[name]);\r\n                        }\r\n                    }\r\n\r\n                    xhr.onreadystatechange = function (e) {\r\n                        if (xhr.readyState == 4) {\r\n                            if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\r\n                                deferred.resolve(xhr.responseText);\r\n                            } else {\r\n                                deferred.reject(xhr);\r\n                            }\r\n                        } else {\r\n                            deferred.notify(xhr.readyState);\r\n                        }\r\n                    };\r\n\r\n                    if (request.data) {\r\n                        if (typeof request.data === 'string') {\r\n                            xhr.send(request.data);\r\n                        } else {\r\n                            xhr.send(JSON.stringify(request.data));\r\n                        }\r\n                    } else {\r\n                        xhr.send();\r\n                    }\r\n\r\n                    return deferred;\r\n                };\r\n\r\n                DataContext.prototype.read = function (path) {\r\n                    return this.request(new Request(this.serviceRootUri + ((this.serviceRootUri.lastIndexOf('/') != this.serviceRootUri.length - 1) ? '/' : '') + path));\r\n                };\r\n\r\n                DataContext.prototype.readUrl = function (url) {\r\n                    return this.request(new Request(url));\r\n                };\r\n\r\n                DataContext.prototype.request = function (request) {\r\n                    var _this = this;\r\n                    var deferred;\r\n\r\n                    this.augmentRequest(request);\r\n\r\n                    if (this._getAccessTokenFn) {\r\n                        deferred = new Microsoft.Utility.Deferred();\r\n                        \r\n                        this._getAccessTokenFn().then((function (token) {\r\n                            // This can now take an object that contains both the token and the user's email\r\n                            // This is so we can set the X-AnchorMailbox header to the user's email, which optimizes\r\n                            // API calls. Check the type returned. If it's just a string, this is being used the 'old' way\r\n                            // and we don't want to break that.\r\n                            request.headers[\"X-ClientService-ClientTag\"] = 'Office 365 API Tools, 1.1.0512';\r\n                            if (typeof(token) == 'string') {\r\n                              request.headers[\"Authorization\"] = 'Bearer ' + token;\r\n                            }\r\n                            else {\r\n                              request.headers[\"Authorization\"] = 'Bearer ' + token.token;\r\n                              request.headers[\"X-AnchorMailbox\"] = token.email;\r\n                            }\r\n                            _this.ajax(request).then(deferred.resolve.bind(deferred), deferred.reject.bind(deferred));\r\n                        }).bind(this), deferred.reject.bind(deferred));\r\n                    } else {\r\n                        deferred = this.ajax(request);\r\n                    }\r\n\r\n                    return deferred;\r\n                };\r\n\r\n                DataContext.prototype.augmentRequest = function (request) {\r\n                    if (!request.headers) {\r\n                        request.headers = {};\r\n                    }\r\n\r\n                    if (!request.headers['Accept']) {\r\n                        request.headers['Accept'] = 'application/json';\r\n                    }\r\n\r\n                    if (!request.headers['Content-Type']) {\r\n                        request.headers['Content-Type'] = 'application/json';\r\n                    }\r\n\r\n                    if (this.extraQueryParameters) {\r\n                        request.requestUri += (request.requestUri.indexOf('?') >= 0 ? '&' : '?') + this.extraQueryParameters;\r\n                    }\r\n\r\n                    // Disabling this code as it is breaking the request URLs when paging\r\n                    //if ((!this._disableCacheOverride && request.disableCache) || (this._disableCacheOverride && this._disableCache)) {\r\n                    //    request.requestUri += (request.requestUri.indexOf('?') >= 0 ? '&' : '?') + '_=' + this._noCache++;\r\n                    //}\r\n                };\r\n                return DataContext;\r\n            })();\r\n            Extensions.DataContext = DataContext;\r\n\r\n            var PagedCollection = (function () {\r\n                function PagedCollection(context, path, resultFn, data) {\r\n                    this._context = context;\r\n                    this._path = path;\r\n                    this._resultFn = resultFn;\r\n                    this._data = data;\r\n                }\r\n                Object.defineProperty(PagedCollection.prototype, \"path\", {\r\n                    get: function () {\r\n                        return this._path;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(PagedCollection.prototype, \"context\", {\r\n                    get: function () {\r\n                        return this._context;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(PagedCollection.prototype, \"currentPage\", {\r\n                    get: function () {\r\n                        return this._data;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                PagedCollection.prototype.getNextPage = function () {\r\n                    var _this = this;\r\n                    var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                    if (this.path == null) {\r\n                        deferred.resolve(null);\r\n                        return deferred;\r\n                    }\r\n\r\n                    var request = new Request(this.path);\r\n\r\n                    request.disableCache = true;\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data), nextLink = (parsedData['odata.nextLink'] === undefined) ? ((parsedData['@odata.nextLink'] === undefined) ? ((parsedData['__next'] === undefined) ? null : parsedData['__next']) : parsedData['@odata.nextLink']) : parsedData['odata.nextLink'];\r\n\r\n                        deferred.resolve(new PagedCollection(_this.context, nextLink, _this._resultFn, _this._resultFn(_this.context, parsedData)));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                    return deferred;\r\n                };\r\n                return PagedCollection;\r\n            })();\r\n            Extensions.PagedCollection = PagedCollection;\r\n\r\n            var CollectionQuery = (function () {\r\n                function CollectionQuery(context, path, resultFn) {\r\n                    this._context = context;\r\n                    this._path = path;\r\n                    this._resultFn = resultFn;\r\n                }\r\n                Object.defineProperty(CollectionQuery.prototype, \"path\", {\r\n                    get: function () {\r\n                        return this._path;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(CollectionQuery.prototype, \"context\", {\r\n                    get: function () {\r\n                        return this._context;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                CollectionQuery.prototype.filter = function (filter) {\r\n                    this.addQuery(\"$filter=\" + filter);\r\n                    return this;\r\n                };\r\n\r\n                CollectionQuery.prototype.select = function (selection) {\r\n                    if (typeof selection === 'string') {\r\n                        this.addQuery(\"$select=\" + selection);\r\n                    } else if (Array.isArray(selection)) {\r\n                        this.addQuery(\"$select=\" + selection.join(','));\r\n                    } else {\r\n                        throw new Microsoft.Utility.Exception('\\'select\\' argument must be string or string[].');\r\n                    }\r\n                    return this;\r\n                };\r\n\r\n                CollectionQuery.prototype.expand = function (expand) {\r\n                    if (typeof expand === 'string') {\r\n                        this.addQuery(\"$expand=\" + expand);\r\n                    } else if (Array.isArray(expand)) {\r\n                        this.addQuery(\"$expand=\" + expand.join(','));\r\n                    } else {\r\n                        throw new Microsoft.Utility.Exception('\\'expand\\' argument must be string or string[].');\r\n                    }\r\n                    return this;\r\n                };\r\n\r\n                CollectionQuery.prototype.orderBy = function (orderBy) {\r\n                    if (typeof orderBy === 'string') {\r\n                        this.addQuery(\"$orderby=\" + orderBy);\r\n                    } else if (Array.isArray(orderBy)) {\r\n                        this.addQuery(\"$orderby=\" + orderBy.join(','));\r\n                    } else {\r\n                        throw new Microsoft.Utility.Exception('\\'orderBy\\' argument must be string or string[].');\r\n                    }\r\n                    return this;\r\n                };\r\n\r\n                CollectionQuery.prototype.top = function (top) {\r\n                    this.addQuery(\"$top=\" + top);\r\n                    return this;\r\n                };\r\n\r\n                CollectionQuery.prototype.skip = function (skip) {\r\n                    this.addQuery(\"$skip=\" + skip);\r\n                    return this;\r\n                };\r\n\r\n                CollectionQuery.prototype.addQuery = function (query) {\r\n                    this._query = (this._query ? this._query + \"&\" : \"\") + query;\r\n                    return this;\r\n                };\r\n\r\n                Object.defineProperty(CollectionQuery.prototype, \"query\", {\r\n                    get: function () {\r\n                        return this._query;\r\n                    },\r\n                    set: function (value) {\r\n                        this._query = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                CollectionQuery.prototype.fetch = function () {\r\n                    var path = this.path + (this._query ? (this.path.indexOf('?') < 0 ? '?' : '&') + this._query : \"\");\r\n\r\n                    return new Microsoft.OutlookServices.Extensions.PagedCollection(this.context, path, this._resultFn).getNextPage();\r\n                };\r\n\r\n                CollectionQuery.prototype.fetchAll = function (maxItems) {\r\n                    var path = this.path + (this._query ? (this.path.indexOf('?') < 0 ? '?' : '&') + this._query : \"\"), pagedItems = new Microsoft.OutlookServices.Extensions.PagedCollection(this.context, path, this._resultFn), accumulator = [], deferred = new Microsoft.Utility.Deferred(), recursive = function (nextPagedItems) {\r\n                        if (!nextPagedItems) {\r\n                            deferred.resolve(accumulator);\r\n                        } else {\r\n                            accumulator = accumulator.concat(nextPagedItems.currentPage);\r\n\r\n                            if (accumulator.length > maxItems) {\r\n                                accumulator = accumulator.splice(maxItems);\r\n                                deferred.resolve(accumulator);\r\n                            } else {\r\n                                nextPagedItems.getNextPage().then(function (nextPage) {\r\n                                    return recursive(nextPage);\r\n                                }, deferred.reject.bind(deferred));\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    pagedItems.getNextPage().then(function (nextPage) {\r\n                        return recursive(nextPage);\r\n                    }, deferred.reject.bind(deferred));\r\n\r\n                    return deferred;\r\n                };\r\n                return CollectionQuery;\r\n            })();\r\n            Extensions.CollectionQuery = CollectionQuery;\r\n\r\n            var QueryableSet = (function () {\r\n                function QueryableSet(context, path, entity) {\r\n                    this._context = context;\r\n                    this._path = path;\r\n                    this._entity = entity;\r\n                }\r\n                Object.defineProperty(QueryableSet.prototype, \"context\", {\r\n                    get: function () {\r\n                        return this._context;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(QueryableSet.prototype, \"entity\", {\r\n                    get: function () {\r\n                        return this._entity;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(QueryableSet.prototype, \"path\", {\r\n                    get: function () {\r\n                        return this._path;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                QueryableSet.prototype.getPath = function (prop) {\r\n                    return this._path + '/' + prop;\r\n                };\r\n                return QueryableSet;\r\n            })();\r\n            Extensions.QueryableSet = QueryableSet;\r\n\r\n            var RestShallowObjectFetcher = (function () {\r\n                function RestShallowObjectFetcher(context, path) {\r\n                    this._path = path;\r\n                    this._context = context;\r\n                }\r\n                Object.defineProperty(RestShallowObjectFetcher.prototype, \"context\", {\r\n                    get: function () {\r\n                        return this._context;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(RestShallowObjectFetcher.prototype, \"path\", {\r\n                    get: function () {\r\n                        return this._path;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                RestShallowObjectFetcher.prototype.getPath = function (prop) {\r\n                    return this._path + '/' + prop;\r\n                };\r\n                return RestShallowObjectFetcher;\r\n            })();\r\n            Extensions.RestShallowObjectFetcher = RestShallowObjectFetcher;\r\n\r\n            var ComplexTypeBase = (function (_super) {\r\n                __extends(ComplexTypeBase, _super);\r\n                function ComplexTypeBase() {\r\n                    _super.call(this);\r\n                }\r\n                return ComplexTypeBase;\r\n            })(ObservableBase);\r\n            Extensions.ComplexTypeBase = ComplexTypeBase;\r\n\r\n            var EntityBase = (function (_super) {\r\n                __extends(EntityBase, _super);\r\n                function EntityBase(context, path) {\r\n                    _super.call(this);\r\n                    this._path = path;\r\n                    this._context = context;\r\n                }\r\n                Object.defineProperty(EntityBase.prototype, \"context\", {\r\n                    get: function () {\r\n                        return this._context;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                Object.defineProperty(EntityBase.prototype, \"path\", {\r\n                    get: function () {\r\n                        return this._path;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n                EntityBase.prototype.getPath = function (prop) {\r\n                    return this._path + '/' + prop;\r\n                };\r\n                return EntityBase;\r\n            })(ObservableBase);\r\n            Extensions.EntityBase = EntityBase;\r\n\r\n            /*\r\n            std\r\n            */\r\n            function isUndefined(v) {\r\n                return typeof v === 'undefined';\r\n            }\r\n            Extensions.isUndefined = isUndefined;\r\n        })(OutlookServices.Extensions || (OutlookServices.Extensions = {}));\r\n        var Extensions = OutlookServices.Extensions;\r\n    })(Microsoft.OutlookServices || (Microsoft.OutlookServices = {}));\r\n    var OutlookServices = Microsoft.OutlookServices;\r\n})(Microsoft || (Microsoft = {}));\r\n\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    (function (OutlookServices) {\r\n        /// <summary>\r\n        /// There are no comments for EntityContainer in the schema.\r\n        /// </summary>\r\n        var Client = (function () {\r\n            function Client(serviceRootUri, getAccessTokenFn) {\r\n                this._context = new Microsoft.OutlookServices.Extensions.DataContext(serviceRootUri, undefined, getAccessTokenFn);\r\n            }\r\n            Object.defineProperty(Client.prototype, \"context\", {\r\n                get: function () {\r\n                    return this._context;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Client.prototype.getPath = function (prop) {\r\n                return this.context.serviceRootUri + '/' + prop;\r\n            };\r\n\r\n            Object.defineProperty(Client.prototype, \"users\", {\r\n                get: function () {\r\n                    if (this._Users === undefined) {\r\n                        this._Users = new Users(this.context, this.getPath('Users'));\r\n                    }\r\n                    return this._Users;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            /// <summary>\r\n            /// There are no comments for Users in the schema.\r\n            /// </summary>\r\n            Client.prototype.addToUsers = function (user) {\r\n                this.users.addUser(user);\r\n            };\r\n\r\n            Object.defineProperty(Client.prototype, \"me\", {\r\n                get: function () {\r\n                    if (this._Me === undefined) {\r\n                        this._Me = new UserFetcher(this.context, this.getPath(\"Me\"));\r\n                    }\r\n                    return this._Me;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            return Client;\r\n        })();\r\n        OutlookServices.Client = Client;\r\n\r\n        /// <summary>\r\n        /// There are no comments for EmailAddress in the schema.\r\n        /// </summary>\r\n        var EmailAddress = (function (_super) {\r\n            __extends(EmailAddress, _super);\r\n            function EmailAddress(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.EmailAddress';\r\n                this._NameChanged = false;\r\n                this._AddressChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Name = data.Name;\r\n                this._Address = data.Address;\r\n            }\r\n            Object.defineProperty(EmailAddress.prototype, \"name\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Name in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Name;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Name) {\r\n                        this._NameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Name = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(EmailAddress.prototype, \"nameChanged\", {\r\n                get: function () {\r\n                    return this._NameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(EmailAddress.prototype, \"address\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Address in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Address;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Address) {\r\n                        this._AddressChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Address = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(EmailAddress.prototype, \"addressChanged\", {\r\n                get: function () {\r\n                    return this._AddressChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            EmailAddress.parseEmailAddress = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new EmailAddress(data);\r\n            };\r\n\r\n            EmailAddress.parseEmailAddresses = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(EmailAddress.parseEmailAddress(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            EmailAddress.prototype.getRequestBody = function () {\r\n                return {\r\n                    Name: (this.nameChanged && this.name) ? this.name : undefined,\r\n                    Address: (this.addressChanged && this.address) ? this.address : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return EmailAddress;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.EmailAddress = EmailAddress;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Recipient in the schema.\r\n        /// </summary>\r\n        var Recipient = (function (_super) {\r\n            __extends(Recipient, _super);\r\n            function Recipient(data) {\r\n                var _this = this;\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.Recipient';\r\n                this._EmailAddressChanged = false;\r\n                this._EmailAddressChangedListener = (function (value) {\r\n                    _this._EmailAddressChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._EmailAddress = EmailAddress.parseEmailAddress(data.EmailAddress);\r\n                if (this._EmailAddress) {\r\n                    this._EmailAddress.addChangedListener(this._EmailAddressChangedListener);\r\n                }\r\n            }\r\n            Object.defineProperty(Recipient.prototype, \"emailAddress\", {\r\n                /// <summary>\r\n                /// There are no comments for Property EmailAddress in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._EmailAddress;\r\n                },\r\n                set: function (value) {\r\n                    if (this._EmailAddress) {\r\n                        this._EmailAddress.removeChangedListener(this._EmailAddressChangedListener);\r\n                    }\r\n                    if (value !== this._EmailAddress) {\r\n                        this._EmailAddressChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._EmailAddress) {\r\n                        this._EmailAddress.addChangedListener(this._EmailAddressChangedListener);\r\n                    }\r\n                    this._EmailAddress = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Recipient.prototype, \"emailAddressChanged\", {\r\n                get: function () {\r\n                    return this._EmailAddressChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Recipient.parseRecipient = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Recipient(data);\r\n            };\r\n\r\n            Recipient.parseRecipients = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Recipient.parseRecipient(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            Recipient.prototype.getRequestBody = function () {\r\n                return {\r\n                    EmailAddress: (this.emailAddressChanged && this.emailAddress) ? this.emailAddress.getRequestBody() : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Recipient;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.Recipient = Recipient;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Attendee in the schema.\r\n        /// </summary>\r\n        var Attendee = (function (_super) {\r\n            __extends(Attendee, _super);\r\n            function Attendee(data) {\r\n                var _this = this;\r\n                _super.call(this, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Attendee';\r\n                this._StatusChanged = false;\r\n                this._StatusChangedListener = (function (value) {\r\n                    _this._StatusChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._TypeChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Status = ResponseStatus.parseResponseStatus(data.Status);\r\n                if (this._Status) {\r\n                    this._Status.addChangedListener(this._StatusChangedListener);\r\n                }\r\n                this._Type = AttendeeType[data.Type];\r\n            }\r\n            Object.defineProperty(Attendee.prototype, \"status\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Status in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Status;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Status) {\r\n                        this._Status.removeChangedListener(this._StatusChangedListener);\r\n                    }\r\n                    if (value !== this._Status) {\r\n                        this._StatusChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Status) {\r\n                        this._Status.addChangedListener(this._StatusChangedListener);\r\n                    }\r\n                    this._Status = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attendee.prototype, \"statusChanged\", {\r\n                get: function () {\r\n                    return this._StatusChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Attendee.prototype, \"type\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Type in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Type;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Type) {\r\n                        this._TypeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Type = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attendee.prototype, \"typeChanged\", {\r\n                get: function () {\r\n                    return this._TypeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Attendee.parseAttendee = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Attendee(data);\r\n            };\r\n\r\n            Attendee.parseAttendees = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Attendee.parseAttendee(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            Attendee.prototype.getRequestBody = function () {\r\n                return {\r\n                    Status: (this.statusChanged && this.status) ? this.status.getRequestBody() : undefined,\r\n                    Type: (this.typeChanged) ? AttendeeType[this.type] : undefined,\r\n                    EmailAddress: (this.emailAddressChanged && this.emailAddress) ? this.emailAddress.getRequestBody() : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Attendee;\r\n        })(Recipient);\r\n        OutlookServices.Attendee = Attendee;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ItemBody in the schema.\r\n        /// </summary>\r\n        var ItemBody = (function (_super) {\r\n            __extends(ItemBody, _super);\r\n            function ItemBody(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.ItemBody';\r\n                this._ContentTypeChanged = false;\r\n                this._ContentChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._ContentType = BodyType[data.ContentType];\r\n                this._Content = data.Content;\r\n            }\r\n            Object.defineProperty(ItemBody.prototype, \"contentType\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ContentType in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ContentType;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ContentType) {\r\n                        this._ContentTypeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ContentType = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(ItemBody.prototype, \"contentTypeChanged\", {\r\n                get: function () {\r\n                    return this._ContentTypeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(ItemBody.prototype, \"content\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Content in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Content;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Content) {\r\n                        this._ContentChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Content = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(ItemBody.prototype, \"contentChanged\", {\r\n                get: function () {\r\n                    return this._ContentChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            ItemBody.parseItemBody = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new ItemBody(data);\r\n            };\r\n\r\n            ItemBody.parseItemBodies = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(ItemBody.parseItemBody(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            ItemBody.prototype.getRequestBody = function () {\r\n                return {\r\n                    ContentType: (this.contentTypeChanged) ? BodyType[this.contentType] : undefined,\r\n                    Content: (this.contentChanged && this.content) ? this.content : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return ItemBody;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.ItemBody = ItemBody;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Location in the schema.\r\n        /// </summary>\r\n        var Location = (function (_super) {\r\n            __extends(Location, _super);\r\n            function Location(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.Location';\r\n                this._DisplayNameChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._DisplayName = data.DisplayName;\r\n            }\r\n            Object.defineProperty(Location.prototype, \"displayName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DisplayName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DisplayName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DisplayName) {\r\n                        this._DisplayNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DisplayName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Location.prototype, \"displayNameChanged\", {\r\n                get: function () {\r\n                    return this._DisplayNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Location.parseLocation = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Location(data);\r\n            };\r\n\r\n            Location.parseLocations = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Location.parseLocation(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            Location.prototype.getRequestBody = function () {\r\n                return {\r\n                    DisplayName: (this.displayNameChanged && this.displayName) ? this.displayName : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Location;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.Location = Location;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ResponseStatus in the schema.\r\n        /// </summary>\r\n        var ResponseStatus = (function (_super) {\r\n            __extends(ResponseStatus, _super);\r\n            function ResponseStatus(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.ResponseStatus';\r\n                this._ResponseChanged = false;\r\n                this._TimeChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Response = ResponseType[data.Response];\r\n                this._Time = (data.Time !== null) ? new Date(data.Time) : null;\r\n            }\r\n            Object.defineProperty(ResponseStatus.prototype, \"response\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Response in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Response;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Response) {\r\n                        this._ResponseChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Response = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(ResponseStatus.prototype, \"responseChanged\", {\r\n                get: function () {\r\n                    return this._ResponseChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(ResponseStatus.prototype, \"time\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Time in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Time;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Time) {\r\n                        this._TimeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Time = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(ResponseStatus.prototype, \"timeChanged\", {\r\n                get: function () {\r\n                    return this._TimeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            ResponseStatus.parseResponseStatus = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new ResponseStatus(data);\r\n            };\r\n\r\n            ResponseStatus.parseResponseStatuses = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(ResponseStatus.parseResponseStatus(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            ResponseStatus.prototype.getRequestBody = function () {\r\n                return {\r\n                    Response: (this.responseChanged) ? ResponseType[this.response] : undefined,\r\n                    Time: (this.timeChanged && this.time) ? this.time.toString() : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return ResponseStatus;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.ResponseStatus = ResponseStatus;\r\n\r\n        /// <summary>\r\n        /// There are no comments for PhysicalAddress in the schema.\r\n        /// </summary>\r\n        var PhysicalAddress = (function (_super) {\r\n            __extends(PhysicalAddress, _super);\r\n            function PhysicalAddress(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.PhysicalAddress';\r\n                this._StreetChanged = false;\r\n                this._CityChanged = false;\r\n                this._StateChanged = false;\r\n                this._CountryOrRegionChanged = false;\r\n                this._PostalCodeChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Street = data.Street;\r\n                this._City = data.City;\r\n                this._State = data.State;\r\n                this._CountryOrRegion = data.CountryOrRegion;\r\n                this._PostalCode = data.PostalCode;\r\n            }\r\n            Object.defineProperty(PhysicalAddress.prototype, \"street\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Street in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Street;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Street) {\r\n                        this._StreetChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Street = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"streetChanged\", {\r\n                get: function () {\r\n                    return this._StreetChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"city\", {\r\n                /// <summary>\r\n                /// There are no comments for Property City in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._City;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._City) {\r\n                        this._CityChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._City = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"cityChanged\", {\r\n                get: function () {\r\n                    return this._CityChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"state\", {\r\n                /// <summary>\r\n                /// There are no comments for Property State in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._State;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._State) {\r\n                        this._StateChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._State = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"stateChanged\", {\r\n                get: function () {\r\n                    return this._StateChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"countryOrRegion\", {\r\n                /// <summary>\r\n                /// There are no comments for Property CountryOrRegion in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._CountryOrRegion;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._CountryOrRegion) {\r\n                        this._CountryOrRegionChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._CountryOrRegion = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"countryOrRegionChanged\", {\r\n                get: function () {\r\n                    return this._CountryOrRegionChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"postalCode\", {\r\n                /// <summary>\r\n                /// There are no comments for Property PostalCode in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._PostalCode;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._PostalCode) {\r\n                        this._PostalCodeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._PostalCode = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PhysicalAddress.prototype, \"postalCodeChanged\", {\r\n                get: function () {\r\n                    return this._PostalCodeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            PhysicalAddress.parsePhysicalAddress = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new PhysicalAddress(data);\r\n            };\r\n\r\n            PhysicalAddress.parsePhysicalAddresses = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(PhysicalAddress.parsePhysicalAddress(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            PhysicalAddress.prototype.getRequestBody = function () {\r\n                return {\r\n                    Street: (this.streetChanged && this.street) ? this.street : undefined,\r\n                    City: (this.cityChanged && this.city) ? this.city : undefined,\r\n                    State: (this.stateChanged && this.state) ? this.state : undefined,\r\n                    CountryOrRegion: (this.countryOrRegionChanged && this.countryOrRegion) ? this.countryOrRegion : undefined,\r\n                    PostalCode: (this.postalCodeChanged && this.postalCode) ? this.postalCode : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return PhysicalAddress;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.PhysicalAddress = PhysicalAddress;\r\n\r\n        /// <summary>\r\n        /// There are no comments for RecurrencePattern in the schema.\r\n        /// </summary>\r\n        var RecurrencePattern = (function (_super) {\r\n            __extends(RecurrencePattern, _super);\r\n            function RecurrencePattern(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.RecurrencePattern';\r\n                this._TypeChanged = false;\r\n                this._IntervalChanged = false;\r\n                this._DayOfMonthChanged = false;\r\n                this._MonthChanged = false;\r\n                this._DaysOfWeek = new Array();\r\n                this._DaysOfWeekChanged = false;\r\n                this._FirstDayOfWeekChanged = false;\r\n                this._IndexChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Type = RecurrencePatternType[data.Type];\r\n                this._Interval = data.Interval;\r\n                this._DayOfMonth = data.DayOfMonth;\r\n                this._Month = data.Month;\r\n                this._DaysOfWeek = data.DaysOfWeek;\r\n                this._FirstDayOfWeek = DayOfWeek[data.FirstDayOfWeek];\r\n                this._Index = WeekIndex[data.Index];\r\n            }\r\n            Object.defineProperty(RecurrencePattern.prototype, \"type\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Type in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Type;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Type) {\r\n                        this._TypeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Type = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"typeChanged\", {\r\n                get: function () {\r\n                    return this._TypeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"interval\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Interval in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Interval;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Interval) {\r\n                        this._IntervalChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Interval = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"intervalChanged\", {\r\n                get: function () {\r\n                    return this._IntervalChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"dayOfMonth\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DayOfMonth in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DayOfMonth;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DayOfMonth) {\r\n                        this._DayOfMonthChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DayOfMonth = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"dayOfMonthChanged\", {\r\n                get: function () {\r\n                    return this._DayOfMonthChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"month\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Month in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Month;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Month) {\r\n                        this._MonthChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Month = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"monthChanged\", {\r\n                get: function () {\r\n                    return this._MonthChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"daysOfWeek\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DaysOfWeek in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DaysOfWeek;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"daysOfWeekChanged\", {\r\n                get: function () {\r\n                    return this._DaysOfWeekChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"firstDayOfWeek\", {\r\n                /// <summary>\r\n                /// There are no comments for Property FirstDayOfWeek in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._FirstDayOfWeek;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._FirstDayOfWeek) {\r\n                        this._FirstDayOfWeekChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._FirstDayOfWeek = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"firstDayOfWeekChanged\", {\r\n                get: function () {\r\n                    return this._FirstDayOfWeekChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"index\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Index in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Index;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Index) {\r\n                        this._IndexChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Index = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrencePattern.prototype, \"indexChanged\", {\r\n                get: function () {\r\n                    return this._IndexChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            RecurrencePattern.parseRecurrencePattern = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new RecurrencePattern(data);\r\n            };\r\n\r\n            RecurrencePattern.parseRecurrencePatterns = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(RecurrencePattern.parseRecurrencePattern(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            RecurrencePattern.prototype.getRequestBody = function () {\r\n                return {\r\n                    Type: (this.typeChanged) ? RecurrencePatternType[this.type] : undefined,\r\n                    Interval: (this.intervalChanged && this.interval) ? this.interval : undefined,\r\n                    DayOfMonth: (this.dayOfMonthChanged && this.dayOfMonth) ? this.dayOfMonth : undefined,\r\n                    Month: (this.monthChanged && this.month) ? this.month : undefined,\r\n                    DaysOfWeek: (this.daysOfWeekChanged) ? (function (DaysOfWeek) {\r\n                        if (!DaysOfWeek) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        DaysOfWeek.forEach(function (value, index, array) {\r\n                            converted.push(DayOfWeek[value]);\r\n                        });\r\n                        return converted;\r\n                    })(this.daysOfWeek) : undefined,\r\n                    FirstDayOfWeek: (this.firstDayOfWeekChanged) ? DayOfWeek[this.firstDayOfWeek] : undefined,\r\n                    Index: (this.indexChanged) ? WeekIndex[this.index] : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return RecurrencePattern;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.RecurrencePattern = RecurrencePattern;\r\n\r\n        /// <summary>\r\n        /// There are no comments for RecurrenceRange in the schema.\r\n        /// </summary>\r\n        var RecurrenceRange = (function (_super) {\r\n            __extends(RecurrenceRange, _super);\r\n            function RecurrenceRange(data) {\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.RecurrenceRange';\r\n                this._TypeChanged = false;\r\n                this._StartDateChanged = false;\r\n                this._EndDateChanged = false;\r\n                this._NumberOfOccurrencesChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Type = RecurrenceRangeType[data.Type];\r\n                this._StartDate = (data.StartDate !== null) ? new Date(data.StartDate) : null;\r\n                this._EndDate = (data.EndDate !== null) ? new Date(data.EndDate) : null;\r\n                this._NumberOfOccurrences = data.NumberOfOccurrences;\r\n            }\r\n            Object.defineProperty(RecurrenceRange.prototype, \"type\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Type in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Type;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Type) {\r\n                        this._TypeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Type = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"typeChanged\", {\r\n                get: function () {\r\n                    return this._TypeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"startDate\", {\r\n                /// <summary>\r\n                /// There are no comments for Property StartDate in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._StartDate;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._StartDate) {\r\n                        this._StartDateChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._StartDate = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"startDateChanged\", {\r\n                get: function () {\r\n                    return this._StartDateChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"endDate\", {\r\n                /// <summary>\r\n                /// There are no comments for Property EndDate in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._EndDate;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._EndDate) {\r\n                        this._EndDateChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._EndDate = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"endDateChanged\", {\r\n                get: function () {\r\n                    return this._EndDateChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"numberOfOccurrences\", {\r\n                /// <summary>\r\n                /// There are no comments for Property NumberOfOccurrences in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._NumberOfOccurrences;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._NumberOfOccurrences) {\r\n                        this._NumberOfOccurrencesChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._NumberOfOccurrences = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(RecurrenceRange.prototype, \"numberOfOccurrencesChanged\", {\r\n                get: function () {\r\n                    return this._NumberOfOccurrencesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            RecurrenceRange.parseRecurrenceRange = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new RecurrenceRange(data);\r\n            };\r\n\r\n            RecurrenceRange.parseRecurrenceRanges = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(RecurrenceRange.parseRecurrenceRange(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            RecurrenceRange.prototype.getRequestBody = function () {\r\n                return {\r\n                    Type: (this.typeChanged) ? RecurrenceRangeType[this.type] : undefined,\r\n                    StartDate: (this.startDateChanged && this.startDate) ? this.startDate.toString() : undefined,\r\n                    EndDate: (this.endDateChanged && this.endDate) ? this.endDate.toString() : undefined,\r\n                    NumberOfOccurrences: (this.numberOfOccurrencesChanged && this.numberOfOccurrences) ? this.numberOfOccurrences : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return RecurrenceRange;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.RecurrenceRange = RecurrenceRange;\r\n\r\n        /// <summary>\r\n        /// There are no comments for PatternedRecurrence in the schema.\r\n        /// </summary>\r\n        var PatternedRecurrence = (function (_super) {\r\n            __extends(PatternedRecurrence, _super);\r\n            function PatternedRecurrence(data) {\r\n                var _this = this;\r\n                _super.call(this);\r\n                this._odataType = 'Microsoft.OutlookServices.PatternedRecurrence';\r\n                this._PatternChanged = false;\r\n                this._PatternChangedListener = (function (value) {\r\n                    _this._PatternChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._RangeChanged = false;\r\n                this._RangeChangedListener = (function (value) {\r\n                    _this._RangeChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Pattern = RecurrencePattern.parseRecurrencePattern(data.Pattern);\r\n                if (this._Pattern) {\r\n                    this._Pattern.addChangedListener(this._PatternChangedListener);\r\n                }\r\n                this._Range = RecurrenceRange.parseRecurrenceRange(data.Range);\r\n                if (this._Range) {\r\n                    this._Range.addChangedListener(this._RangeChangedListener);\r\n                }\r\n            }\r\n            Object.defineProperty(PatternedRecurrence.prototype, \"pattern\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Pattern in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Pattern;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Pattern) {\r\n                        this._Pattern.removeChangedListener(this._PatternChangedListener);\r\n                    }\r\n                    if (value !== this._Pattern) {\r\n                        this._PatternChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Pattern) {\r\n                        this._Pattern.addChangedListener(this._PatternChangedListener);\r\n                    }\r\n                    this._Pattern = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PatternedRecurrence.prototype, \"patternChanged\", {\r\n                get: function () {\r\n                    return this._PatternChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(PatternedRecurrence.prototype, \"range\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Range in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Range;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Range) {\r\n                        this._Range.removeChangedListener(this._RangeChangedListener);\r\n                    }\r\n                    if (value !== this._Range) {\r\n                        this._RangeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Range) {\r\n                        this._Range.addChangedListener(this._RangeChangedListener);\r\n                    }\r\n                    this._Range = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(PatternedRecurrence.prototype, \"rangeChanged\", {\r\n                get: function () {\r\n                    return this._RangeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            PatternedRecurrence.parsePatternedRecurrence = function (data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new PatternedRecurrence(data);\r\n            };\r\n\r\n            PatternedRecurrence.parsePatternedRecurrences = function (data) {\r\n                var results = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(PatternedRecurrence.parsePatternedRecurrence(data[i]));\r\n                    }\r\n                }\r\n\r\n                results.changed = false;\r\n\r\n                return results;\r\n            };\r\n\r\n            PatternedRecurrence.prototype.getRequestBody = function () {\r\n                return {\r\n                    Pattern: (this.patternChanged && this.pattern) ? this.pattern.getRequestBody() : undefined,\r\n                    Range: (this.rangeChanged && this.range) ? this.range.getRequestBody() : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return PatternedRecurrence;\r\n        })(OutlookServices.Extensions.ComplexTypeBase);\r\n        OutlookServices.PatternedRecurrence = PatternedRecurrence;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Entity in the schema.\r\n        /// </summary>\r\n        var EntityFetcher = (function (_super) {\r\n            __extends(EntityFetcher, _super);\r\n            function EntityFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            return EntityFetcher;\r\n        })(OutlookServices.Extensions.RestShallowObjectFetcher);\r\n        OutlookServices.EntityFetcher = EntityFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Entity in the schema.\r\n        /// </summary>\r\n        var Entity = (function (_super) {\r\n            __extends(Entity, _super);\r\n            function Entity(context, path, data) {\r\n                _super.call(this, context, path);\r\n                this._odataType = 'Microsoft.OutlookServices.Entity';\r\n                this._IdChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Id = data.Id;\r\n            }\r\n            Object.defineProperty(Entity.prototype, \"id\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Id in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Id;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Id) {\r\n                        this._IdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Id = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Entity.prototype, \"idChanged\", {\r\n                get: function () {\r\n                    return this._IdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Entity.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Entity.parseEntity(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Entity.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Entity.parseEntity = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                if (data['@odata.type']) {\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.User')\r\n                        return new User(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Folder')\r\n                        return new Folder(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Item')\r\n                        return new Item(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Message')\r\n                        return new Message(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Attachment')\r\n                        return new Attachment(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.FileAttachment')\r\n                        return new FileAttachment(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.ItemAttachment')\r\n                        return new ItemAttachment(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Calendar')\r\n                        return new Calendar(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.CalendarGroup')\r\n                        return new CalendarGroup(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Event')\r\n                        return new Event(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Contact')\r\n                        return new Contact(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.ContactFolder')\r\n                        return new ContactFolder(context, path, data);\r\n                }\r\n\r\n                return new Entity(context, path, data);\r\n            };\r\n\r\n            Entity.parseEntities = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Entity.parseEntity(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Entity.prototype.getRequestBody = function () {\r\n                return {\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Entity;\r\n        })(OutlookServices.Extensions.EntityBase);\r\n        OutlookServices.Entity = Entity;\r\n\r\n        /// <summary>\r\n        /// There are no comments for User in the schema.\r\n        /// </summary>\r\n        var UserFetcher = (function (_super) {\r\n            __extends(UserFetcher, _super);\r\n            function UserFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(UserFetcher.prototype, \"folders\", {\r\n                get: function () {\r\n                    if (this._Folders === undefined) {\r\n                        this._Folders = new Microsoft.OutlookServices.Folders(this.context, this.getPath('Folders'));\r\n                    }\r\n                    return this._Folders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"messages\", {\r\n                get: function () {\r\n                    if (this._Messages === undefined) {\r\n                        this._Messages = new Microsoft.OutlookServices.Messages(this.context, this.getPath('Messages'));\r\n                    }\r\n                    return this._Messages;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"rootFolder\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property RootFolder in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._RootFolder === undefined) {\r\n                        this._RootFolder = new FolderFetcher(this.context, this.getPath(\"RootFolder\"));\r\n                    }\r\n                    return this._RootFolder;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            UserFetcher.prototype.update_rootFolder = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/RootFolder\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"calendars\", {\r\n                get: function () {\r\n                    if (this._Calendars === undefined) {\r\n                        this._Calendars = new Microsoft.OutlookServices.Calendars(this.context, this.getPath('Calendars'));\r\n                    }\r\n                    return this._Calendars;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"calendar\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property Calendar in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._Calendar === undefined) {\r\n                        this._Calendar = new CalendarFetcher(this.context, this.getPath(\"Calendar\"));\r\n                    }\r\n                    return this._Calendar;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            UserFetcher.prototype.update_calendar = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/Calendar\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"calendarGroups\", {\r\n                get: function () {\r\n                    if (this._CalendarGroups === undefined) {\r\n                        this._CalendarGroups = new Microsoft.OutlookServices.CalendarGroups(this.context, this.getPath('CalendarGroups'));\r\n                    }\r\n                    return this._CalendarGroups;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"events\", {\r\n                get: function () {\r\n                    if (this._Events === undefined) {\r\n                        this._Events = new Microsoft.OutlookServices.Events(this.context, this.getPath('Events'));\r\n                    }\r\n                    return this._Events;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"calendarView\", {\r\n                get: function () {\r\n                    if (this._CalendarView === undefined) {\r\n                        this._CalendarView = new Microsoft.OutlookServices.Events(this.context, this.getPath('CalendarView'));\r\n                    }\r\n                    return this._CalendarView;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"contacts\", {\r\n                get: function () {\r\n                    if (this._Contacts === undefined) {\r\n                        this._Contacts = new Microsoft.OutlookServices.Contacts(this.context, this.getPath('Contacts'));\r\n                    }\r\n                    return this._Contacts;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(UserFetcher.prototype, \"contactFolders\", {\r\n                get: function () {\r\n                    if (this._ContactFolders === undefined) {\r\n                        this._ContactFolders = new Microsoft.OutlookServices.ContactFolders(this.context, this.getPath('ContactFolders'));\r\n                    }\r\n                    return this._ContactFolders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            UserFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(User.parseUser(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            UserFetcher.prototype.sendMail = function (Message, SaveToSentItems) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"SendMail\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Message\": Message, \"SaveToSentItems\": SaveToSentItems });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return UserFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.UserFetcher = UserFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for User in the schema.\r\n        /// </summary>\r\n        var User = (function (_super) {\r\n            __extends(User, _super);\r\n            function User(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.User';\r\n                this._DisplayNameChanged = false;\r\n                this._AliasChanged = false;\r\n                this._MailboxGuidChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._DisplayName = data.DisplayName;\r\n                this._Alias = data.Alias;\r\n                this._MailboxGuid = data.MailboxGuid;\r\n            }\r\n            Object.defineProperty(User.prototype, \"displayName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DisplayName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DisplayName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DisplayName) {\r\n                        this._DisplayNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DisplayName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(User.prototype, \"displayNameChanged\", {\r\n                get: function () {\r\n                    return this._DisplayNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"alias\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Alias in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Alias;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Alias) {\r\n                        this._AliasChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Alias = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(User.prototype, \"aliasChanged\", {\r\n                get: function () {\r\n                    return this._AliasChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"mailboxGuid\", {\r\n                /// <summary>\r\n                /// There are no comments for Property MailboxGuid in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._MailboxGuid;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._MailboxGuid) {\r\n                        this._MailboxGuidChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._MailboxGuid = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(User.prototype, \"mailboxGuidChanged\", {\r\n                get: function () {\r\n                    return this._MailboxGuidChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"folders\", {\r\n                get: function () {\r\n                    if (this._Folders === undefined) {\r\n                        this._Folders = new Microsoft.OutlookServices.Folders(this.context, this.getPath('Folders'));\r\n                    }\r\n                    return this._Folders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"messages\", {\r\n                get: function () {\r\n                    if (this._Messages === undefined) {\r\n                        this._Messages = new Microsoft.OutlookServices.Messages(this.context, this.getPath('Messages'));\r\n                    }\r\n                    return this._Messages;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"rootFolder\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property RootFolder in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._RootFolder === undefined) {\r\n                        this._RootFolder = new FolderFetcher(this.context, this.getPath(\"RootFolder\"));\r\n                    }\r\n                    return this._RootFolder;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            User.prototype.update_rootFolder = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/RootFolder\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Object.defineProperty(User.prototype, \"calendars\", {\r\n                get: function () {\r\n                    if (this._Calendars === undefined) {\r\n                        this._Calendars = new Microsoft.OutlookServices.Calendars(this.context, this.getPath('Calendars'));\r\n                    }\r\n                    return this._Calendars;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"calendar\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property Calendar in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._Calendar === undefined) {\r\n                        this._Calendar = new CalendarFetcher(this.context, this.getPath(\"Calendar\"));\r\n                    }\r\n                    return this._Calendar;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            User.prototype.update_calendar = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/Calendar\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Object.defineProperty(User.prototype, \"calendarGroups\", {\r\n                get: function () {\r\n                    if (this._CalendarGroups === undefined) {\r\n                        this._CalendarGroups = new Microsoft.OutlookServices.CalendarGroups(this.context, this.getPath('CalendarGroups'));\r\n                    }\r\n                    return this._CalendarGroups;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"events\", {\r\n                get: function () {\r\n                    if (this._Events === undefined) {\r\n                        this._Events = new Microsoft.OutlookServices.Events(this.context, this.getPath('Events'));\r\n                    }\r\n                    return this._Events;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"calendarView\", {\r\n                get: function () {\r\n                    if (this._CalendarView === undefined) {\r\n                        this._CalendarView = new Microsoft.OutlookServices.Events(this.context, this.getPath('CalendarView'));\r\n                    }\r\n                    return this._CalendarView;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"contacts\", {\r\n                get: function () {\r\n                    if (this._Contacts === undefined) {\r\n                        this._Contacts = new Microsoft.OutlookServices.Contacts(this.context, this.getPath('Contacts'));\r\n                    }\r\n                    return this._Contacts;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(User.prototype, \"contactFolders\", {\r\n                get: function () {\r\n                    if (this._ContactFolders === undefined) {\r\n                        this._ContactFolders = new Microsoft.OutlookServices.ContactFolders(this.context, this.getPath('ContactFolders'));\r\n                    }\r\n                    return this._ContactFolders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            User.prototype.sendMail = function (Message, SaveToSentItems) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"SendMail\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Message\": Message, \"SaveToSentItems\": SaveToSentItems });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            User.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(User.parseUser(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            User.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            User.parseUser = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new User(context, path, data);\r\n            };\r\n\r\n            User.parseUsers = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(User.parseUser(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            User.prototype.getRequestBody = function () {\r\n                return {\r\n                    DisplayName: (this.displayNameChanged && this.displayName) ? this.displayName : undefined,\r\n                    Alias: (this.aliasChanged && this.alias) ? this.alias : undefined,\r\n                    MailboxGuid: (this.mailboxGuidChanged && this.mailboxGuid) ? this.mailboxGuid : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return User;\r\n        })(Entity);\r\n        OutlookServices.User = User;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Folder in the schema.\r\n        /// </summary>\r\n        var FolderFetcher = (function (_super) {\r\n            __extends(FolderFetcher, _super);\r\n            function FolderFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(FolderFetcher.prototype, \"childFolders\", {\r\n                get: function () {\r\n                    if (this._ChildFolders === undefined) {\r\n                        this._ChildFolders = new Microsoft.OutlookServices.Folders(this.context, this.getPath('ChildFolders'));\r\n                    }\r\n                    return this._ChildFolders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(FolderFetcher.prototype, \"messages\", {\r\n                get: function () {\r\n                    if (this._Messages === undefined) {\r\n                        this._Messages = new Microsoft.OutlookServices.Messages(this.context, this.getPath('Messages'));\r\n                    }\r\n                    return this._Messages;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            FolderFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            FolderFetcher.prototype.copy = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Copy\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            FolderFetcher.prototype.move = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Move\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return FolderFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.FolderFetcher = FolderFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Folder in the schema.\r\n        /// </summary>\r\n        var Folder = (function (_super) {\r\n            __extends(Folder, _super);\r\n            function Folder(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Folder';\r\n                this._ParentFolderIdChanged = false;\r\n                this._DisplayNameChanged = false;\r\n                this._ChildFolderCountChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._ParentFolderId = data.ParentFolderId;\r\n                this._DisplayName = data.DisplayName;\r\n                this._ChildFolderCount = data.ChildFolderCount;\r\n            }\r\n            Object.defineProperty(Folder.prototype, \"parentFolderId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ParentFolderId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ParentFolderId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ParentFolderId) {\r\n                        this._ParentFolderIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ParentFolderId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Folder.prototype, \"parentFolderIdChanged\", {\r\n                get: function () {\r\n                    return this._ParentFolderIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Folder.prototype, \"displayName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DisplayName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DisplayName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DisplayName) {\r\n                        this._DisplayNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DisplayName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Folder.prototype, \"displayNameChanged\", {\r\n                get: function () {\r\n                    return this._DisplayNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Folder.prototype, \"childFolderCount\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ChildFolderCount in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ChildFolderCount;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ChildFolderCount) {\r\n                        this._ChildFolderCountChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ChildFolderCount = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Folder.prototype, \"childFolderCountChanged\", {\r\n                get: function () {\r\n                    return this._ChildFolderCountChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Folder.prototype, \"childFolders\", {\r\n                get: function () {\r\n                    if (this._ChildFolders === undefined) {\r\n                        this._ChildFolders = new Microsoft.OutlookServices.Folders(this.context, this.getPath('ChildFolders'));\r\n                    }\r\n                    return this._ChildFolders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Folder.prototype, \"messages\", {\r\n                get: function () {\r\n                    if (this._Messages === undefined) {\r\n                        this._Messages = new Microsoft.OutlookServices.Messages(this.context, this.getPath('Messages'));\r\n                    }\r\n                    return this._Messages;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Folder.prototype.copy = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Copy\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Folder.prototype.move = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Move\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Folder.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Folder.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Folder.parseFolder = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Folder(context, path, data);\r\n            };\r\n\r\n            Folder.parseFolders = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Folder.parseFolder(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Folder.prototype.getRequestBody = function () {\r\n                return {\r\n                    ParentFolderId: (this.parentFolderIdChanged && this.parentFolderId) ? this.parentFolderId : undefined,\r\n                    DisplayName: (this.displayNameChanged && this.displayName) ? this.displayName : undefined,\r\n                    ChildFolderCount: (this.childFolderCountChanged && this.childFolderCount) ? this.childFolderCount : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Folder;\r\n        })(Entity);\r\n        OutlookServices.Folder = Folder;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Item in the schema.\r\n        /// </summary>\r\n        var ItemFetcher = (function (_super) {\r\n            __extends(ItemFetcher, _super);\r\n            function ItemFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            return ItemFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.ItemFetcher = ItemFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Item in the schema.\r\n        /// </summary>\r\n        var Item = (function (_super) {\r\n            __extends(Item, _super);\r\n            function Item(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Item';\r\n                this._ChangeKeyChanged = false;\r\n                this._Categories = new Array();\r\n                this._CategoriesChanged = false;\r\n                this._DateTimeCreatedChanged = false;\r\n                this._DateTimeLastModifiedChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._ChangeKey = data.ChangeKey;\r\n                this._Categories = data.Categories;\r\n                this._DateTimeCreated = (data.DateTimeCreated !== null) ? new Date(data.DateTimeCreated) : null;\r\n                this._DateTimeLastModified = (data.DateTimeLastModified !== null) ? new Date(data.DateTimeLastModified) : null;\r\n            }\r\n            Object.defineProperty(Item.prototype, \"changeKey\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ChangeKey in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ChangeKey;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ChangeKey) {\r\n                        this._ChangeKeyChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ChangeKey = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Item.prototype, \"changeKeyChanged\", {\r\n                get: function () {\r\n                    return this._ChangeKeyChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Item.prototype, \"categories\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Categories in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Categories;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Item.prototype, \"categoriesChanged\", {\r\n                get: function () {\r\n                    return this._CategoriesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Item.prototype, \"dateTimeCreated\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DateTimeCreated in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DateTimeCreated;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DateTimeCreated) {\r\n                        this._DateTimeCreatedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DateTimeCreated = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Item.prototype, \"dateTimeCreatedChanged\", {\r\n                get: function () {\r\n                    return this._DateTimeCreatedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Item.prototype, \"dateTimeLastModified\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DateTimeLastModified in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DateTimeLastModified;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DateTimeLastModified) {\r\n                        this._DateTimeLastModifiedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DateTimeLastModified = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Item.prototype, \"dateTimeLastModifiedChanged\", {\r\n                get: function () {\r\n                    return this._DateTimeLastModifiedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Item.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Item.parseItem(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Item.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Item.parseItem = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                if (data['@odata.type']) {\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Message')\r\n                        return new Message(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Event')\r\n                        return new Event(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.Contact')\r\n                        return new Contact(context, path, data);\r\n                }\r\n\r\n                return new Item(context, path, data);\r\n            };\r\n\r\n            Item.parseItems = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Item.parseItem(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Item.prototype.getRequestBody = function () {\r\n                return {\r\n                    ChangeKey: (this.changeKeyChanged && this.changeKey) ? this.changeKey : undefined,\r\n                    Categories: (this.categoriesChanged && this.categories) ? this.categories : undefined,\r\n                    DateTimeCreated: (this.dateTimeCreatedChanged && this.dateTimeCreated) ? this.dateTimeCreated.toString() : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Item;\r\n        })(Entity);\r\n        OutlookServices.Item = Item;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Message in the schema.\r\n        /// </summary>\r\n        var MessageFetcher = (function (_super) {\r\n            __extends(MessageFetcher, _super);\r\n            function MessageFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(MessageFetcher.prototype, \"attachments\", {\r\n                get: function () {\r\n                    if (this._Attachments === undefined) {\r\n                        this._Attachments = new Microsoft.OutlookServices.Attachments(this.context, this.getPath('Attachments'));\r\n                    }\r\n                    return this._Attachments;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            MessageFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.copy = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Copy\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.move = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Move\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.createReply = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"CreateReply\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.createReplyAll = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"CreateReplyAll\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.createForward = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"CreateForward\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.reply = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Reply\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.replyAll = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"ReplyAll\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.forward = function (Comment, ToRecipients) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Forward\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment, \"ToRecipients\": ToRecipients });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            MessageFetcher.prototype.send = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Send\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return MessageFetcher;\r\n        })(ItemFetcher);\r\n        OutlookServices.MessageFetcher = MessageFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Message in the schema.\r\n        /// </summary>\r\n        var Message = (function (_super) {\r\n            __extends(Message, _super);\r\n            function Message(context, path, data) {\r\n                var _this = this;\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Message';\r\n                this._SubjectChanged = false;\r\n                this._BodyChanged = false;\r\n                this._BodyChangedListener = (function (value) {\r\n                    _this._BodyChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._BodyPreviewChanged = false;\r\n                this._ImportanceChanged = false;\r\n                this._HasAttachmentsChanged = false;\r\n                this._ParentFolderIdChanged = false;\r\n                this._FromChanged = false;\r\n                this._FromChangedListener = (function (value) {\r\n                    _this._FromChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._SenderChanged = false;\r\n                this._SenderChangedListener = (function (value) {\r\n                    _this._SenderChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._ToRecipients = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n                this._ToRecipientsChanged = false;\r\n                this._ToRecipientsChangedListener = (function (value) {\r\n                    _this._ToRecipientsChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._CcRecipients = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n                this._CcRecipientsChanged = false;\r\n                this._CcRecipientsChangedListener = (function (value) {\r\n                    _this._CcRecipientsChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._BccRecipients = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n                this._BccRecipientsChanged = false;\r\n                this._BccRecipientsChangedListener = (function (value) {\r\n                    _this._BccRecipientsChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._ReplyTo = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n                this._ReplyToChanged = false;\r\n                this._ReplyToChangedListener = (function (value) {\r\n                    _this._ReplyToChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._ConversationIdChanged = false;\r\n                this._UniqueBodyChanged = false;\r\n                this._UniqueBodyChangedListener = (function (value) {\r\n                    _this._UniqueBodyChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._DateTimeReceivedChanged = false;\r\n                this._DateTimeSentChanged = false;\r\n                this._IsDeliveryReceiptRequestedChanged = false;\r\n                this._IsReadReceiptRequestedChanged = false;\r\n                this._IsDraftChanged = false;\r\n                this._IsReadChanged = false;\r\n\r\n                if (!data) {\r\n                    this._ToRecipients.addChangedListener(this._ToRecipientsChangedListener);\r\n                    this._CcRecipients.addChangedListener(this._CcRecipientsChangedListener);\r\n                    this._BccRecipients.addChangedListener(this._BccRecipientsChangedListener);\r\n                    this._ReplyTo.addChangedListener(this._ReplyToChangedListener);\r\n                    return;\r\n                }\r\n\r\n                this._Subject = data.Subject;\r\n                this._Body = ItemBody.parseItemBody(data.Body);\r\n                if (this._Body) {\r\n                    this._Body.addChangedListener(this._BodyChangedListener);\r\n                }\r\n                this._BodyPreview = data.BodyPreview;\r\n                this._Importance = Importance[data.Importance];\r\n                this._HasAttachments = data.HasAttachments;\r\n                this._ParentFolderId = data.ParentFolderId;\r\n                this._From = Recipient.parseRecipient(data.From);\r\n                if (this._From) {\r\n                    this._From.addChangedListener(this._FromChangedListener);\r\n                }\r\n                this._Sender = Recipient.parseRecipient(data.Sender);\r\n                if (this._Sender) {\r\n                    this._Sender.addChangedListener(this._SenderChangedListener);\r\n                }\r\n                this._ToRecipients = Recipient.parseRecipients(data.ToRecipients);\r\n                this._ToRecipients.addChangedListener(this._ToRecipientsChangedListener);\r\n                this._CcRecipients = Recipient.parseRecipients(data.CcRecipients);\r\n                this._CcRecipients.addChangedListener(this._CcRecipientsChangedListener);\r\n                this._BccRecipients = Recipient.parseRecipients(data.BccRecipients);\r\n                this._BccRecipients.addChangedListener(this._BccRecipientsChangedListener);\r\n                this._ReplyTo = Recipient.parseRecipients(data.ReplyTo);\r\n                this._ReplyTo.addChangedListener(this._ReplyToChangedListener);\r\n                this._ConversationId = data.ConversationId;\r\n                this._UniqueBody = ItemBody.parseItemBody(data.UniqueBody);\r\n                if (this._UniqueBody) {\r\n                    this._UniqueBody.addChangedListener(this._UniqueBodyChangedListener);\r\n                }\r\n                this._DateTimeReceived = (data.DateTimeReceived !== null) ? new Date(data.DateTimeReceived) : null;\r\n                this._DateTimeSent = (data.DateTimeSent !== null) ? new Date(data.DateTimeSent) : null;\r\n                this._IsDeliveryReceiptRequested = data.IsDeliveryReceiptRequested;\r\n                this._IsReadReceiptRequested = data.IsReadReceiptRequested;\r\n                this._IsDraft = data.IsDraft;\r\n                this._IsRead = data.IsRead;\r\n            }\r\n            Object.defineProperty(Message.prototype, \"subject\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Subject in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Subject;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Subject) {\r\n                        this._SubjectChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Subject = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"subjectChanged\", {\r\n                get: function () {\r\n                    return this._SubjectChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"body\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Body in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Body;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Body) {\r\n                        this._Body.removeChangedListener(this._BodyChangedListener);\r\n                    }\r\n                    if (value !== this._Body) {\r\n                        this._BodyChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Body) {\r\n                        this._Body.addChangedListener(this._BodyChangedListener);\r\n                    }\r\n                    this._Body = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"bodyChanged\", {\r\n                get: function () {\r\n                    return this._BodyChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"bodyPreview\", {\r\n                /// <summary>\r\n                /// There are no comments for Property BodyPreview in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._BodyPreview;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._BodyPreview) {\r\n                        this._BodyPreviewChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._BodyPreview = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"bodyPreviewChanged\", {\r\n                get: function () {\r\n                    return this._BodyPreviewChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"importance\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Importance in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Importance;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Importance) {\r\n                        this._ImportanceChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Importance = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"importanceChanged\", {\r\n                get: function () {\r\n                    return this._ImportanceChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"hasAttachments\", {\r\n                /// <summary>\r\n                /// There are no comments for Property HasAttachments in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._HasAttachments;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._HasAttachments) {\r\n                        this._HasAttachmentsChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._HasAttachments = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"hasAttachmentsChanged\", {\r\n                get: function () {\r\n                    return this._HasAttachmentsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"parentFolderId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ParentFolderId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ParentFolderId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ParentFolderId) {\r\n                        this._ParentFolderIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ParentFolderId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"parentFolderIdChanged\", {\r\n                get: function () {\r\n                    return this._ParentFolderIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"from\", {\r\n                /// <summary>\r\n                /// There are no comments for Property From in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._From;\r\n                },\r\n                set: function (value) {\r\n                    if (this._From) {\r\n                        this._From.removeChangedListener(this._FromChangedListener);\r\n                    }\r\n                    if (value !== this._From) {\r\n                        this._FromChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._From) {\r\n                        this._From.addChangedListener(this._FromChangedListener);\r\n                    }\r\n                    this._From = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"fromChanged\", {\r\n                get: function () {\r\n                    return this._FromChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"sender\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Sender in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Sender;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Sender) {\r\n                        this._Sender.removeChangedListener(this._SenderChangedListener);\r\n                    }\r\n                    if (value !== this._Sender) {\r\n                        this._SenderChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Sender) {\r\n                        this._Sender.addChangedListener(this._SenderChangedListener);\r\n                    }\r\n                    this._Sender = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"senderChanged\", {\r\n                get: function () {\r\n                    return this._SenderChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"toRecipients\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ToRecipients in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ToRecipients;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"toRecipientsChanged\", {\r\n                get: function () {\r\n                    return this._ToRecipientsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"ccRecipients\", {\r\n                /// <summary>\r\n                /// There are no comments for Property CcRecipients in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._CcRecipients;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"ccRecipientsChanged\", {\r\n                get: function () {\r\n                    return this._CcRecipientsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"bccRecipients\", {\r\n                /// <summary>\r\n                /// There are no comments for Property BccRecipients in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._BccRecipients;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"bccRecipientsChanged\", {\r\n                get: function () {\r\n                    return this._BccRecipientsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"replyTo\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ReplyTo in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ReplyTo;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"replyToChanged\", {\r\n                get: function () {\r\n                    return this._ReplyToChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"conversationId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ConversationId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ConversationId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ConversationId) {\r\n                        this._ConversationIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ConversationId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"conversationIdChanged\", {\r\n                get: function () {\r\n                    return this._ConversationIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"uniqueBody\", {\r\n                /// <summary>\r\n                /// There are no comments for Property UniqueBody in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._UniqueBody;\r\n                },\r\n                set: function (value) {\r\n                    if (this._UniqueBody) {\r\n                        this._UniqueBody.removeChangedListener(this._UniqueBodyChangedListener);\r\n                    }\r\n                    if (value !== this._UniqueBody) {\r\n                        this._UniqueBodyChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._UniqueBody) {\r\n                        this._UniqueBody.addChangedListener(this._UniqueBodyChangedListener);\r\n                    }\r\n                    this._UniqueBody = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"uniqueBodyChanged\", {\r\n                get: function () {\r\n                    return this._UniqueBodyChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"dateTimeReceived\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DateTimeReceived in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DateTimeReceived;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DateTimeReceived) {\r\n                        this._DateTimeReceivedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DateTimeReceived = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"dateTimeReceivedChanged\", {\r\n                get: function () {\r\n                    return this._DateTimeReceivedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"dateTimeSent\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DateTimeSent in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DateTimeSent;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DateTimeSent) {\r\n                        this._DateTimeSentChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DateTimeSent = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"dateTimeSentChanged\", {\r\n                get: function () {\r\n                    return this._DateTimeSentChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"isDeliveryReceiptRequested\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsDeliveryReceiptRequested in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsDeliveryReceiptRequested;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsDeliveryReceiptRequested) {\r\n                        this._IsDeliveryReceiptRequestedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsDeliveryReceiptRequested = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"isDeliveryReceiptRequestedChanged\", {\r\n                get: function () {\r\n                    return this._IsDeliveryReceiptRequestedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"isReadReceiptRequested\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsReadReceiptRequested in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsReadReceiptRequested;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsReadReceiptRequested) {\r\n                        this._IsReadReceiptRequestedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsReadReceiptRequested = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"isReadReceiptRequestedChanged\", {\r\n                get: function () {\r\n                    return this._IsReadReceiptRequestedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"isDraft\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsDraft in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsDraft;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsDraft) {\r\n                        this._IsDraftChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsDraft = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"isDraftChanged\", {\r\n                get: function () {\r\n                    return this._IsDraftChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"isRead\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsRead in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsRead;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsRead) {\r\n                        this._IsReadChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsRead = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Message.prototype, \"isReadChanged\", {\r\n                get: function () {\r\n                    return this._IsReadChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Message.prototype, \"attachments\", {\r\n                get: function () {\r\n                    if (this._Attachments === undefined) {\r\n                        this._Attachments = new Microsoft.OutlookServices.Attachments(this.context, this.getPath('Attachments'));\r\n                    }\r\n                    return this._Attachments;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Message.prototype.copy = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Copy\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.move = function (DestinationId) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Move\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"DestinationId\": DestinationId });\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.createReply = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"CreateReply\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.createReplyAll = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"CreateReplyAll\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.createForward = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"CreateForward\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.reply = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Reply\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.replyAll = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"ReplyAll\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.forward = function (Comment, ToRecipients) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Forward\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment, \"ToRecipients\": ToRecipients });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.send = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Send\"));\r\n\r\n                request.method = 'POST';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Message.parseMessage = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Message(context, path, data);\r\n            };\r\n\r\n            Message.parseMessages = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Message.parseMessage(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Message.prototype.getRequestBody = function () {\r\n                return {\r\n                    Subject: (this.subjectChanged && this.subject) ? this.subject : undefined,\r\n                    Body: (this.bodyChanged && this.body) ? this.body.getRequestBody() : undefined,\r\n                    BodyPreview: (this.bodyPreviewChanged && this.bodyPreview) ? this.bodyPreview : undefined,\r\n                    Importance: (this.importanceChanged) ? Importance[this.importance] : undefined,\r\n                    HasAttachments: (this.hasAttachmentsChanged && this.hasAttachments) ? this.hasAttachments : undefined,\r\n                    ParentFolderId: (this.parentFolderIdChanged && this.parentFolderId) ? this.parentFolderId : undefined,\r\n                    From: (this.fromChanged && this.from) ? this.from.getRequestBody() : undefined,\r\n                    Sender: (this.senderChanged && this.sender) ? this.sender.getRequestBody() : undefined,\r\n                    ToRecipients: (this.toRecipientsChanged) ? (function (ToRecipients) {\r\n                        if (!ToRecipients) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        ToRecipients.forEach(function (value, index, array) {\r\n                            converted.push(value.getRequestBody());\r\n                        });\r\n                        return converted;\r\n                    })(this.toRecipients) : undefined,\r\n                    CcRecipients: (this.ccRecipientsChanged) ? (function (CcRecipients) {\r\n                        if (!CcRecipients) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        CcRecipients.forEach(function (value, index, array) {\r\n                            converted.push(value.getRequestBody());\r\n                        });\r\n                        return converted;\r\n                    })(this.ccRecipients) : undefined,\r\n                    BccRecipients: (this.bccRecipientsChanged) ? (function (BccRecipients) {\r\n                        if (!BccRecipients) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        BccRecipients.forEach(function (value, index, array) {\r\n                            converted.push(value.getRequestBody());\r\n                        });\r\n                        return converted;\r\n                    })(this.bccRecipients) : undefined,\r\n                    ReplyTo: (this.replyToChanged) ? (function (ReplyTo) {\r\n                        if (!ReplyTo) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        ReplyTo.forEach(function (value, index, array) {\r\n                            converted.push(value.getRequestBody());\r\n                        });\r\n                        return converted;\r\n                    })(this.replyTo) : undefined,\r\n                    ConversationId: (this.conversationIdChanged && this.conversationId) ? this.conversationId : undefined,\r\n                    UniqueBody: (this.uniqueBodyChanged && this.uniqueBody) ? this.uniqueBody.getRequestBody() : undefined,\r\n                    DateTimeReceived: (this.dateTimeReceivedChanged && this.dateTimeReceived) ? this.dateTimeReceived.toString() : undefined,\r\n                    DateTimeSent: (this.dateTimeSentChanged && this.dateTimeSent) ? this.dateTimeSent.toString() : undefined,\r\n                    IsDeliveryReceiptRequested: (this.isDeliveryReceiptRequestedChanged && this.isDeliveryReceiptRequested) ? this.isDeliveryReceiptRequested : undefined,\r\n                    IsReadReceiptRequested: (this.isReadReceiptRequestedChanged && this.isReadReceiptRequested) ? this.isReadReceiptRequested : undefined,\r\n                    IsDraft: (this.isDraftChanged && this.isDraft) ? this.isDraft : undefined,\r\n                    IsRead: (this.isReadChanged && this.isRead) ? this.isRead : undefined,\r\n                    ChangeKey: (this.changeKeyChanged && this.changeKey) ? this.changeKey : undefined,\r\n                    Categories: (this.categoriesChanged && this.categories) ? this.categories : undefined,\r\n                    DateTimeCreated: (this.dateTimeCreatedChanged && this.dateTimeCreated) ? this.dateTimeCreated.toString() : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Message;\r\n        })(Item);\r\n        OutlookServices.Message = Message;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Attachment in the schema.\r\n        /// </summary>\r\n        var AttachmentFetcher = (function (_super) {\r\n            __extends(AttachmentFetcher, _super);\r\n            function AttachmentFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            return AttachmentFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.AttachmentFetcher = AttachmentFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Attachment in the schema.\r\n        /// </summary>\r\n        var Attachment = (function (_super) {\r\n            __extends(Attachment, _super);\r\n            function Attachment(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Attachment';\r\n                this._NameChanged = false;\r\n                this._ContentTypeChanged = false;\r\n                this._SizeChanged = false;\r\n                this._IsInlineChanged = false;\r\n                this._DateTimeLastModifiedChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Name = data.Name;\r\n                this._ContentType = data.ContentType;\r\n                this._Size = data.Size;\r\n                this._IsInline = data.IsInline;\r\n                this._DateTimeLastModified = (data.DateTimeLastModified !== null) ? new Date(data.DateTimeLastModified) : null;\r\n            }\r\n            Object.defineProperty(Attachment.prototype, \"name\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Name in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Name;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Name) {\r\n                        this._NameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Name = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attachment.prototype, \"nameChanged\", {\r\n                get: function () {\r\n                    return this._NameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Attachment.prototype, \"contentType\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ContentType in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ContentType;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ContentType) {\r\n                        this._ContentTypeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ContentType = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attachment.prototype, \"contentTypeChanged\", {\r\n                get: function () {\r\n                    return this._ContentTypeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Attachment.prototype, \"size\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Size in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Size;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Size) {\r\n                        this._SizeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Size = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attachment.prototype, \"sizeChanged\", {\r\n                get: function () {\r\n                    return this._SizeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Attachment.prototype, \"isInline\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsInline in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsInline;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsInline) {\r\n                        this._IsInlineChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsInline = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attachment.prototype, \"isInlineChanged\", {\r\n                get: function () {\r\n                    return this._IsInlineChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Attachment.prototype, \"dateTimeLastModified\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DateTimeLastModified in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DateTimeLastModified;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DateTimeLastModified) {\r\n                        this._DateTimeLastModifiedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DateTimeLastModified = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Attachment.prototype, \"dateTimeLastModifiedChanged\", {\r\n                get: function () {\r\n                    return this._DateTimeLastModifiedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Attachment.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Attachment.parseAttachment(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Attachment.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Attachment.parseAttachment = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                if (data['@odata.type']) {\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.FileAttachment')\r\n                        return new FileAttachment(context, path, data);\r\n                    if (data['@odata.type'] === 'Microsoft.OutlookServices.ItemAttachment')\r\n                        return new ItemAttachment(context, path, data);\r\n                }\r\n\r\n                return new Attachment(context, path, data);\r\n            };\r\n\r\n            Attachment.parseAttachments = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Attachment.parseAttachment(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Attachment.prototype.getRequestBody = function () {\r\n                return {\r\n                    Name: (this.nameChanged && this.name) ? this.name : undefined,\r\n                    ContentType: (this.contentTypeChanged && this.contentType) ? this.contentType : undefined,\r\n                    Size: (this.sizeChanged && this.size) ? this.size : undefined,\r\n                    IsInline: (this.isInlineChanged && this.isInline) ? this.isInline : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Attachment;\r\n        })(Entity);\r\n        OutlookServices.Attachment = Attachment;\r\n\r\n        /// <summary>\r\n        /// There are no comments for FileAttachment in the schema.\r\n        /// </summary>\r\n        var FileAttachmentFetcher = (function (_super) {\r\n            __extends(FileAttachmentFetcher, _super);\r\n            function FileAttachmentFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            FileAttachmentFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(FileAttachment.parseFileAttachment(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return FileAttachmentFetcher;\r\n        })(AttachmentFetcher);\r\n        OutlookServices.FileAttachmentFetcher = FileAttachmentFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for FileAttachment in the schema.\r\n        /// </summary>\r\n        var FileAttachment = (function (_super) {\r\n            __extends(FileAttachment, _super);\r\n            function FileAttachment(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.FileAttachment';\r\n                this._ContentIdChanged = false;\r\n                this._ContentLocationChanged = false;\r\n                this._IsContactPhotoChanged = false;\r\n                this._ContentBytesChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._ContentId = data.ContentId;\r\n                this._ContentLocation = data.ContentLocation;\r\n                this._IsContactPhoto = data.IsContactPhoto;\r\n                this._ContentBytes = data.ContentBytes;\r\n            }\r\n            Object.defineProperty(FileAttachment.prototype, \"contentId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ContentId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ContentId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ContentId) {\r\n                        this._ContentIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ContentId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"contentIdChanged\", {\r\n                get: function () {\r\n                    return this._ContentIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"contentLocation\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ContentLocation in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ContentLocation;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ContentLocation) {\r\n                        this._ContentLocationChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ContentLocation = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"contentLocationChanged\", {\r\n                get: function () {\r\n                    return this._ContentLocationChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"isContactPhoto\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsContactPhoto in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsContactPhoto;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsContactPhoto) {\r\n                        this._IsContactPhotoChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsContactPhoto = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"isContactPhotoChanged\", {\r\n                get: function () {\r\n                    return this._IsContactPhotoChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"contentBytes\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ContentBytes in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ContentBytes;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ContentBytes) {\r\n                        this._ContentBytesChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ContentBytes = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(FileAttachment.prototype, \"contentBytesChanged\", {\r\n                get: function () {\r\n                    return this._ContentBytesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            FileAttachment.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(FileAttachment.parseFileAttachment(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            FileAttachment.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            FileAttachment.parseFileAttachment = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new FileAttachment(context, path, data);\r\n            };\r\n\r\n            FileAttachment.parseFileAttachments = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(FileAttachment.parseFileAttachment(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            FileAttachment.prototype.getRequestBody = function () {\r\n                return {\r\n                    ContentId: (this.contentIdChanged && this.contentId) ? this.contentId : undefined,\r\n                    ContentLocation: (this.contentLocationChanged && this.contentLocation) ? this.contentLocation : undefined,\r\n                    IsContactPhoto: (this.isContactPhotoChanged && this.isContactPhoto) ? this.isContactPhoto : undefined,\r\n                    ContentBytes: (this.contentBytesChanged && this.contentBytes) ? this.contentBytes : undefined,\r\n                    Name: (this.nameChanged && this.name) ? this.name : undefined,\r\n                    ContentType: (this.contentTypeChanged && this.contentType) ? this.contentType : undefined,\r\n                    Size: (this.sizeChanged && this.size) ? this.size : undefined,\r\n                    IsInline: (this.isInlineChanged && this.isInline) ? this.isInline : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return FileAttachment;\r\n        })(Attachment);\r\n        OutlookServices.FileAttachment = FileAttachment;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ItemAttachment in the schema.\r\n        /// </summary>\r\n        var ItemAttachmentFetcher = (function (_super) {\r\n            __extends(ItemAttachmentFetcher, _super);\r\n            function ItemAttachmentFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(ItemAttachmentFetcher.prototype, \"item\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property Item in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._Item === undefined) {\r\n                        this._Item = new ItemFetcher(this.context, this.getPath(\"Item\"));\r\n                    }\r\n                    return this._Item;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            ItemAttachmentFetcher.prototype.update_item = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/Item\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            ItemAttachmentFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(ItemAttachment.parseItemAttachment(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return ItemAttachmentFetcher;\r\n        })(AttachmentFetcher);\r\n        OutlookServices.ItemAttachmentFetcher = ItemAttachmentFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ItemAttachment in the schema.\r\n        /// </summary>\r\n        var ItemAttachment = (function (_super) {\r\n            __extends(ItemAttachment, _super);\r\n            function ItemAttachment(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.ItemAttachment';\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n            }\r\n            Object.defineProperty(ItemAttachment.prototype, \"item\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property Item in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._Item === undefined) {\r\n                        this._Item = new ItemFetcher(this.context, this.getPath(\"Item\"));\r\n                    }\r\n                    return this._Item;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            ItemAttachment.prototype.update_item = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/Item\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            ItemAttachment.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(ItemAttachment.parseItemAttachment(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            ItemAttachment.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            ItemAttachment.parseItemAttachment = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new ItemAttachment(context, path, data);\r\n            };\r\n\r\n            ItemAttachment.parseItemAttachments = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(ItemAttachment.parseItemAttachment(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            ItemAttachment.prototype.getRequestBody = function () {\r\n                return {\r\n                    Name: (this.nameChanged && this.name) ? this.name : undefined,\r\n                    ContentType: (this.contentTypeChanged && this.contentType) ? this.contentType : undefined,\r\n                    Size: (this.sizeChanged && this.size) ? this.size : undefined,\r\n                    IsInline: (this.isInlineChanged && this.isInline) ? this.isInline : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return ItemAttachment;\r\n        })(Attachment);\r\n        OutlookServices.ItemAttachment = ItemAttachment;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Calendar in the schema.\r\n        /// </summary>\r\n        var CalendarFetcher = (function (_super) {\r\n            __extends(CalendarFetcher, _super);\r\n            function CalendarFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(CalendarFetcher.prototype, \"calendarView\", {\r\n                get: function () {\r\n                    if (this._CalendarView === undefined) {\r\n                        this._CalendarView = new Microsoft.OutlookServices.Events(this.context, this.getPath('CalendarView'));\r\n                    }\r\n                    return this._CalendarView;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(CalendarFetcher.prototype, \"events\", {\r\n                get: function () {\r\n                    if (this._Events === undefined) {\r\n                        this._Events = new Microsoft.OutlookServices.Events(this.context, this.getPath('Events'));\r\n                    }\r\n                    return this._Events;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            CalendarFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Calendar.parseCalendar(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return CalendarFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.CalendarFetcher = CalendarFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Calendar in the schema.\r\n        /// </summary>\r\n        var Calendar = (function (_super) {\r\n            __extends(Calendar, _super);\r\n            function Calendar(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Calendar';\r\n                this._NameChanged = false;\r\n                this._ChangeKeyChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Name = data.Name;\r\n                this._ChangeKey = data.ChangeKey;\r\n            }\r\n            Object.defineProperty(Calendar.prototype, \"name\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Name in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Name;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Name) {\r\n                        this._NameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Name = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Calendar.prototype, \"nameChanged\", {\r\n                get: function () {\r\n                    return this._NameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Calendar.prototype, \"changeKey\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ChangeKey in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ChangeKey;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ChangeKey) {\r\n                        this._ChangeKeyChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ChangeKey = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Calendar.prototype, \"changeKeyChanged\", {\r\n                get: function () {\r\n                    return this._ChangeKeyChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Calendar.prototype, \"calendarView\", {\r\n                get: function () {\r\n                    if (this._CalendarView === undefined) {\r\n                        this._CalendarView = new Microsoft.OutlookServices.Events(this.context, this.getPath('CalendarView'));\r\n                    }\r\n                    return this._CalendarView;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Calendar.prototype, \"events\", {\r\n                get: function () {\r\n                    if (this._Events === undefined) {\r\n                        this._Events = new Microsoft.OutlookServices.Events(this.context, this.getPath('Events'));\r\n                    }\r\n                    return this._Events;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Calendar.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Calendar.parseCalendar(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Calendar.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Calendar.parseCalendar = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Calendar(context, path, data);\r\n            };\r\n\r\n            Calendar.parseCalendars = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Calendar.parseCalendar(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Calendar.prototype.getRequestBody = function () {\r\n                return {\r\n                    Name: (this.nameChanged && this.name) ? this.name : undefined,\r\n                    ChangeKey: (this.changeKeyChanged && this.changeKey) ? this.changeKey : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Calendar;\r\n        })(Entity);\r\n        OutlookServices.Calendar = Calendar;\r\n\r\n        /// <summary>\r\n        /// There are no comments for CalendarGroup in the schema.\r\n        /// </summary>\r\n        var CalendarGroupFetcher = (function (_super) {\r\n            __extends(CalendarGroupFetcher, _super);\r\n            function CalendarGroupFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(CalendarGroupFetcher.prototype, \"calendars\", {\r\n                get: function () {\r\n                    if (this._Calendars === undefined) {\r\n                        this._Calendars = new Microsoft.OutlookServices.Calendars(this.context, this.getPath('Calendars'));\r\n                    }\r\n                    return this._Calendars;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            CalendarGroupFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(CalendarGroup.parseCalendarGroup(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return CalendarGroupFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.CalendarGroupFetcher = CalendarGroupFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for CalendarGroup in the schema.\r\n        /// </summary>\r\n        var CalendarGroup = (function (_super) {\r\n            __extends(CalendarGroup, _super);\r\n            function CalendarGroup(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.CalendarGroup';\r\n                this._NameChanged = false;\r\n                this._ChangeKeyChanged = false;\r\n                this._ClassIdChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._Name = data.Name;\r\n                this._ChangeKey = data.ChangeKey;\r\n                this._ClassId = data.ClassId;\r\n            }\r\n            Object.defineProperty(CalendarGroup.prototype, \"name\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Name in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Name;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Name) {\r\n                        this._NameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Name = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(CalendarGroup.prototype, \"nameChanged\", {\r\n                get: function () {\r\n                    return this._NameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(CalendarGroup.prototype, \"changeKey\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ChangeKey in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ChangeKey;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ChangeKey) {\r\n                        this._ChangeKeyChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ChangeKey = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(CalendarGroup.prototype, \"changeKeyChanged\", {\r\n                get: function () {\r\n                    return this._ChangeKeyChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(CalendarGroup.prototype, \"classId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ClassId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ClassId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ClassId) {\r\n                        this._ClassIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ClassId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(CalendarGroup.prototype, \"classIdChanged\", {\r\n                get: function () {\r\n                    return this._ClassIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(CalendarGroup.prototype, \"calendars\", {\r\n                get: function () {\r\n                    if (this._Calendars === undefined) {\r\n                        this._Calendars = new Microsoft.OutlookServices.Calendars(this.context, this.getPath('Calendars'));\r\n                    }\r\n                    return this._Calendars;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            CalendarGroup.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(CalendarGroup.parseCalendarGroup(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            CalendarGroup.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            CalendarGroup.parseCalendarGroup = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new CalendarGroup(context, path, data);\r\n            };\r\n\r\n            CalendarGroup.parseCalendarGroups = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(CalendarGroup.parseCalendarGroup(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            CalendarGroup.prototype.getRequestBody = function () {\r\n                return {\r\n                    Name: (this.nameChanged && this.name) ? this.name : undefined,\r\n                    ChangeKey: (this.changeKeyChanged && this.changeKey) ? this.changeKey : undefined,\r\n                    ClassId: (this.classIdChanged && this.classId) ? this.classId : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return CalendarGroup;\r\n        })(Entity);\r\n        OutlookServices.CalendarGroup = CalendarGroup;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Event in the schema.\r\n        /// </summary>\r\n        var EventFetcher = (function (_super) {\r\n            __extends(EventFetcher, _super);\r\n            function EventFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(EventFetcher.prototype, \"attachments\", {\r\n                get: function () {\r\n                    if (this._Attachments === undefined) {\r\n                        this._Attachments = new Microsoft.OutlookServices.Attachments(this.context, this.getPath('Attachments'));\r\n                    }\r\n                    return this._Attachments;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(EventFetcher.prototype, \"calendar\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property Calendar in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._Calendar === undefined) {\r\n                        this._Calendar = new CalendarFetcher(this.context, this.getPath(\"Calendar\"));\r\n                    }\r\n                    return this._Calendar;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            EventFetcher.prototype.update_calendar = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/Calendar\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Object.defineProperty(EventFetcher.prototype, \"instances\", {\r\n                get: function () {\r\n                    if (this._Instances === undefined) {\r\n                        this._Instances = new Microsoft.OutlookServices.Events(this.context, this.getPath('Instances'));\r\n                    }\r\n                    return this._Instances;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            EventFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Event.parseEvent(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            EventFetcher.prototype.accept = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Accept\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            EventFetcher.prototype.decline = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Decline\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            EventFetcher.prototype.tentativelyAccept = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"TentativelyAccept\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return EventFetcher;\r\n        })(ItemFetcher);\r\n        OutlookServices.EventFetcher = EventFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Event in the schema.\r\n        /// </summary>\r\n        var Event = (function (_super) {\r\n            __extends(Event, _super);\r\n            function Event(context, path, data) {\r\n                var _this = this;\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Event';\r\n                this._SubjectChanged = false;\r\n                this._BodyChanged = false;\r\n                this._BodyChangedListener = (function (value) {\r\n                    _this._BodyChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._BodyPreviewChanged = false;\r\n                this._ImportanceChanged = false;\r\n                this._HasAttachmentsChanged = false;\r\n                this._StartChanged = false;\r\n                this._EndChanged = false;\r\n                this._LocationChanged = false;\r\n                this._LocationChangedListener = (function (value) {\r\n                    _this._LocationChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._ShowAsChanged = false;\r\n                this._IsAllDayChanged = false;\r\n                this._IsCancelledChanged = false;\r\n                this._IsOrganizerChanged = false;\r\n                this._ResponseRequestedChanged = false;\r\n                this._TypeChanged = false;\r\n                this._SeriesMasterIdChanged = false;\r\n                this._Attendees = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n                this._AttendeesChanged = false;\r\n                this._AttendeesChangedListener = (function (value) {\r\n                    _this._AttendeesChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._RecurrenceChanged = false;\r\n                this._RecurrenceChangedListener = (function (value) {\r\n                    _this._RecurrenceChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._OrganizerChanged = false;\r\n                this._OrganizerChangedListener = (function (value) {\r\n                    _this._OrganizerChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n\r\n                if (!data) {\r\n                    this._Attendees.addChangedListener(this._AttendeesChangedListener);\r\n                    return;\r\n                }\r\n\r\n                this._Subject = data.Subject;\r\n                this._Body = ItemBody.parseItemBody(data.Body);\r\n                if (this._Body) {\r\n                    this._Body.addChangedListener(this._BodyChangedListener);\r\n                }\r\n                this._BodyPreview = data.BodyPreview;\r\n                this._Importance = Importance[data.Importance];\r\n                this._HasAttachments = data.HasAttachments;\r\n                this._Start = (data.Start !== null) ? new Date(data.Start) : null;\r\n                this._End = (data.End !== null) ? new Date(data.End) : null;\r\n                this._Location = Location.parseLocation(data.Location);\r\n                if (this._Location) {\r\n                    this._Location.addChangedListener(this._LocationChangedListener);\r\n                }\r\n                this._ShowAs = FreeBusyStatus[data.ShowAs];\r\n                this._IsAllDay = data.IsAllDay;\r\n                this._IsCancelled = data.IsCancelled;\r\n                this._IsOrganizer = data.IsOrganizer;\r\n                this._ResponseRequested = data.ResponseRequested;\r\n                this._Type = EventType[data.Type];\r\n                this._SeriesMasterId = data.SeriesMasterId;\r\n                this._Attendees = Attendee.parseAttendees(data.Attendees);\r\n                this._Attendees.addChangedListener(this._AttendeesChangedListener);\r\n                this._Recurrence = PatternedRecurrence.parsePatternedRecurrence(data.Recurrence);\r\n                if (this._Recurrence) {\r\n                    this._Recurrence.addChangedListener(this._RecurrenceChangedListener);\r\n                }\r\n                this._Organizer = Recipient.parseRecipient(data.Organizer);\r\n                if (this._Organizer) {\r\n                    this._Organizer.addChangedListener(this._OrganizerChangedListener);\r\n                }\r\n            }\r\n            Object.defineProperty(Event.prototype, \"subject\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Subject in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Subject;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Subject) {\r\n                        this._SubjectChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Subject = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"subjectChanged\", {\r\n                get: function () {\r\n                    return this._SubjectChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"body\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Body in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Body;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Body) {\r\n                        this._Body.removeChangedListener(this._BodyChangedListener);\r\n                    }\r\n                    if (value !== this._Body) {\r\n                        this._BodyChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Body) {\r\n                        this._Body.addChangedListener(this._BodyChangedListener);\r\n                    }\r\n                    this._Body = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"bodyChanged\", {\r\n                get: function () {\r\n                    return this._BodyChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"bodyPreview\", {\r\n                /// <summary>\r\n                /// There are no comments for Property BodyPreview in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._BodyPreview;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._BodyPreview) {\r\n                        this._BodyPreviewChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._BodyPreview = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"bodyPreviewChanged\", {\r\n                get: function () {\r\n                    return this._BodyPreviewChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"importance\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Importance in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Importance;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Importance) {\r\n                        this._ImportanceChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Importance = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"importanceChanged\", {\r\n                get: function () {\r\n                    return this._ImportanceChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"hasAttachments\", {\r\n                /// <summary>\r\n                /// There are no comments for Property HasAttachments in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._HasAttachments;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._HasAttachments) {\r\n                        this._HasAttachmentsChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._HasAttachments = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"hasAttachmentsChanged\", {\r\n                get: function () {\r\n                    return this._HasAttachmentsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"start\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Start in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Start;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Start) {\r\n                        this._StartChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Start = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"startChanged\", {\r\n                get: function () {\r\n                    return this._StartChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"end\", {\r\n                /// <summary>\r\n                /// There are no comments for Property End in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._End;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._End) {\r\n                        this._EndChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._End = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"endChanged\", {\r\n                get: function () {\r\n                    return this._EndChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"location\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Location in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Location;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Location) {\r\n                        this._Location.removeChangedListener(this._LocationChangedListener);\r\n                    }\r\n                    if (value !== this._Location) {\r\n                        this._LocationChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Location) {\r\n                        this._Location.addChangedListener(this._LocationChangedListener);\r\n                    }\r\n                    this._Location = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"locationChanged\", {\r\n                get: function () {\r\n                    return this._LocationChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"showAs\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ShowAs in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ShowAs;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ShowAs) {\r\n                        this._ShowAsChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ShowAs = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"showAsChanged\", {\r\n                get: function () {\r\n                    return this._ShowAsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"isAllDay\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsAllDay in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsAllDay;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsAllDay) {\r\n                        this._IsAllDayChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsAllDay = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"isAllDayChanged\", {\r\n                get: function () {\r\n                    return this._IsAllDayChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"isCancelled\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsCancelled in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsCancelled;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsCancelled) {\r\n                        this._IsCancelledChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsCancelled = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"isCancelledChanged\", {\r\n                get: function () {\r\n                    return this._IsCancelledChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"isOrganizer\", {\r\n                /// <summary>\r\n                /// There are no comments for Property IsOrganizer in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._IsOrganizer;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._IsOrganizer) {\r\n                        this._IsOrganizerChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._IsOrganizer = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"isOrganizerChanged\", {\r\n                get: function () {\r\n                    return this._IsOrganizerChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"responseRequested\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ResponseRequested in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ResponseRequested;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ResponseRequested) {\r\n                        this._ResponseRequestedChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ResponseRequested = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"responseRequestedChanged\", {\r\n                get: function () {\r\n                    return this._ResponseRequestedChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"type\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Type in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Type;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Type) {\r\n                        this._TypeChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Type = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"typeChanged\", {\r\n                get: function () {\r\n                    return this._TypeChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"seriesMasterId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property SeriesMasterId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._SeriesMasterId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._SeriesMasterId) {\r\n                        this._SeriesMasterIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._SeriesMasterId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"seriesMasterIdChanged\", {\r\n                get: function () {\r\n                    return this._SeriesMasterIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"attendees\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Attendees in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Attendees;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"attendeesChanged\", {\r\n                get: function () {\r\n                    return this._AttendeesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"recurrence\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Recurrence in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Recurrence;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Recurrence) {\r\n                        this._Recurrence.removeChangedListener(this._RecurrenceChangedListener);\r\n                    }\r\n                    if (value !== this._Recurrence) {\r\n                        this._RecurrenceChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Recurrence) {\r\n                        this._Recurrence.addChangedListener(this._RecurrenceChangedListener);\r\n                    }\r\n                    this._Recurrence = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"recurrenceChanged\", {\r\n                get: function () {\r\n                    return this._RecurrenceChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"organizer\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Organizer in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Organizer;\r\n                },\r\n                set: function (value) {\r\n                    if (this._Organizer) {\r\n                        this._Organizer.removeChangedListener(this._OrganizerChangedListener);\r\n                    }\r\n                    if (value !== this._Organizer) {\r\n                        this._OrganizerChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._Organizer) {\r\n                        this._Organizer.addChangedListener(this._OrganizerChangedListener);\r\n                    }\r\n                    this._Organizer = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Event.prototype, \"organizerChanged\", {\r\n                get: function () {\r\n                    return this._OrganizerChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"attachments\", {\r\n                get: function () {\r\n                    if (this._Attachments === undefined) {\r\n                        this._Attachments = new Microsoft.OutlookServices.Attachments(this.context, this.getPath('Attachments'));\r\n                    }\r\n                    return this._Attachments;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Event.prototype, \"calendar\", {\r\n                /// <summary>\r\n                /// There are no comments for Query Property Calendar in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    if (this._Calendar === undefined) {\r\n                        this._Calendar = new CalendarFetcher(this.context, this.getPath(\"Calendar\"));\r\n                    }\r\n                    return this._Calendar;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Event.prototype.update_calendar = function (value) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"$links/Calendar\"));\r\n\r\n                request.method = 'PUT';\r\n                request.data = JSON.stringify({ url: value.path });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Object.defineProperty(Event.prototype, \"instances\", {\r\n                get: function () {\r\n                    if (this._Instances === undefined) {\r\n                        this._Instances = new Microsoft.OutlookServices.Events(this.context, this.getPath('Instances'));\r\n                    }\r\n                    return this._Instances;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Event.prototype.accept = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Accept\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Event.prototype.decline = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"Decline\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Event.prototype.tentativelyAccept = function (Comment) {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.getPath(\"TentativelyAccept\"));\r\n\r\n                request.method = 'POST';\r\n                request.data = JSON.stringify({ \"Comment\": Comment });\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Event.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Event.parseEvent(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Event.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Event.parseEvent = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Event(context, path, data);\r\n            };\r\n\r\n            Event.parseEvents = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Event.parseEvent(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Event.prototype.getRequestBody = function () {\r\n                return {\r\n                    Subject: (this.subjectChanged && this.subject) ? this.subject : undefined,\r\n                    Body: (this.bodyChanged && this.body) ? this.body.getRequestBody() : undefined,\r\n                    BodyPreview: (this.bodyPreviewChanged && this.bodyPreview) ? this.bodyPreview : undefined,\r\n                    Importance: (this.importanceChanged) ? Importance[this.importance] : undefined,\r\n                    HasAttachments: (this.hasAttachmentsChanged && this.hasAttachments) ? this.hasAttachments : undefined,\r\n                    Start: (this.startChanged && this.start) ? this.start.toString() : undefined,\r\n                    End: (this.endChanged && this.end) ? this.end.toString() : undefined,\r\n                    Location: (this.locationChanged && this.location) ? this.location.getRequestBody() : undefined,\r\n                    ShowAs: (this.showAsChanged) ? FreeBusyStatus[this.showAs] : undefined,\r\n                    IsAllDay: (this.isAllDayChanged && this.isAllDay) ? this.isAllDay : undefined,\r\n                    IsCancelled: (this.isCancelledChanged && this.isCancelled) ? this.isCancelled : undefined,\r\n                    IsOrganizer: (this.isOrganizerChanged && this.isOrganizer) ? this.isOrganizer : undefined,\r\n                    ResponseRequested: (this.responseRequestedChanged && this.responseRequested) ? this.responseRequested : undefined,\r\n                    Type: (this.typeChanged) ? EventType[this.type] : undefined,\r\n                    SeriesMasterId: (this.seriesMasterIdChanged && this.seriesMasterId) ? this.seriesMasterId : undefined,\r\n                    Attendees: (this.attendeesChanged) ? (function (Attendees) {\r\n                        if (!Attendees) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        Attendees.forEach(function (value, index, array) {\r\n                            converted.push(value.getRequestBody());\r\n                        });\r\n                        return converted;\r\n                    })(this.attendees) : undefined,\r\n                    Recurrence: (this.recurrenceChanged && this.recurrence) ? this.recurrence.getRequestBody() : undefined,\r\n                    Organizer: (this.organizerChanged && this.organizer) ? this.organizer.getRequestBody() : undefined,\r\n                    ChangeKey: (this.changeKeyChanged && this.changeKey) ? this.changeKey : undefined,\r\n                    Categories: (this.categoriesChanged && this.categories) ? this.categories : undefined,\r\n                    DateTimeCreated: (this.dateTimeCreatedChanged && this.dateTimeCreated) ? this.dateTimeCreated.toString() : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Event;\r\n        })(Item);\r\n        OutlookServices.Event = Event;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Contact in the schema.\r\n        /// </summary>\r\n        var ContactFetcher = (function (_super) {\r\n            __extends(ContactFetcher, _super);\r\n            function ContactFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            ContactFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Contact.parseContact(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return ContactFetcher;\r\n        })(ItemFetcher);\r\n        OutlookServices.ContactFetcher = ContactFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Contact in the schema.\r\n        /// </summary>\r\n        var Contact = (function (_super) {\r\n            __extends(Contact, _super);\r\n            function Contact(context, path, data) {\r\n                var _this = this;\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.Contact';\r\n                this._ParentFolderIdChanged = false;\r\n                this._BirthdayChanged = false;\r\n                this._FileAsChanged = false;\r\n                this._DisplayNameChanged = false;\r\n                this._GivenNameChanged = false;\r\n                this._InitialsChanged = false;\r\n                this._MiddleNameChanged = false;\r\n                this._NickNameChanged = false;\r\n                this._SurnameChanged = false;\r\n                this._TitleChanged = false;\r\n                this._GenerationChanged = false;\r\n                this._EmailAddresses = new Microsoft.OutlookServices.Extensions.ObservableCollection();\r\n                this._EmailAddressesChanged = false;\r\n                this._EmailAddressesChangedListener = (function (value) {\r\n                    _this._EmailAddressesChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._ImAddresses = new Array();\r\n                this._ImAddressesChanged = false;\r\n                this._JobTitleChanged = false;\r\n                this._CompanyNameChanged = false;\r\n                this._DepartmentChanged = false;\r\n                this._OfficeLocationChanged = false;\r\n                this._ProfessionChanged = false;\r\n                this._BusinessHomePageChanged = false;\r\n                this._AssistantNameChanged = false;\r\n                this._ManagerChanged = false;\r\n                this._HomePhones = new Array();\r\n                this._HomePhonesChanged = false;\r\n                this._BusinessPhones = new Array();\r\n                this._BusinessPhonesChanged = false;\r\n                this._MobilePhone1Changed = false;\r\n                this._HomeAddressChanged = false;\r\n                this._HomeAddressChangedListener = (function (value) {\r\n                    _this._HomeAddressChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._BusinessAddressChanged = false;\r\n                this._BusinessAddressChangedListener = (function (value) {\r\n                    _this._BusinessAddressChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._OtherAddressChanged = false;\r\n                this._OtherAddressChangedListener = (function (value) {\r\n                    _this._OtherAddressChanged = true;\r\n                    _this.changed = true;\r\n                }).bind(this);\r\n                this._YomiCompanyNameChanged = false;\r\n                this._YomiGivenNameChanged = false;\r\n                this._YomiSurnameChanged = false;\r\n\r\n                if (!data) {\r\n                    this._EmailAddresses.addChangedListener(this._EmailAddressesChangedListener);\r\n                    return;\r\n                }\r\n\r\n                this._ParentFolderId = data.ParentFolderId;\r\n                this._Birthday = (data.Birthday !== null) ? new Date(data.Birthday) : null;\r\n                this._FileAs = data.FileAs;\r\n                this._DisplayName = data.DisplayName;\r\n                this._GivenName = data.GivenName;\r\n                this._Initials = data.Initials;\r\n                this._MiddleName = data.MiddleName;\r\n                this._NickName = data.NickName;\r\n                this._Surname = data.Surname;\r\n                this._Title = data.Title;\r\n                this._Generation = data.Generation;\r\n                this._EmailAddresses = EmailAddress.parseEmailAddresses(data.EmailAddresses);\r\n                this._EmailAddresses.addChangedListener(this._EmailAddressesChangedListener);\r\n                this._ImAddresses = data.ImAddresses;\r\n                this._JobTitle = data.JobTitle;\r\n                this._CompanyName = data.CompanyName;\r\n                this._Department = data.Department;\r\n                this._OfficeLocation = data.OfficeLocation;\r\n                this._Profession = data.Profession;\r\n                this._BusinessHomePage = data.BusinessHomePage;\r\n                this._AssistantName = data.AssistantName;\r\n                this._Manager = data.Manager;\r\n                this._HomePhones = data.HomePhones;\r\n                this._BusinessPhones = data.BusinessPhones;\r\n                this._MobilePhone1 = data.MobilePhone1;\r\n                this._HomeAddress = PhysicalAddress.parsePhysicalAddress(data.HomeAddress);\r\n                if (this._HomeAddress) {\r\n                    this._HomeAddress.addChangedListener(this._HomeAddressChangedListener);\r\n                }\r\n                this._BusinessAddress = PhysicalAddress.parsePhysicalAddress(data.BusinessAddress);\r\n                if (this._BusinessAddress) {\r\n                    this._BusinessAddress.addChangedListener(this._BusinessAddressChangedListener);\r\n                }\r\n                this._OtherAddress = PhysicalAddress.parsePhysicalAddress(data.OtherAddress);\r\n                if (this._OtherAddress) {\r\n                    this._OtherAddress.addChangedListener(this._OtherAddressChangedListener);\r\n                }\r\n                this._YomiCompanyName = data.YomiCompanyName;\r\n                this._YomiGivenName = data.YomiGivenName;\r\n                this._YomiSurname = data.YomiSurname;\r\n            }\r\n            Object.defineProperty(Contact.prototype, \"parentFolderId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ParentFolderId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ParentFolderId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ParentFolderId) {\r\n                        this._ParentFolderIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ParentFolderId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"parentFolderIdChanged\", {\r\n                get: function () {\r\n                    return this._ParentFolderIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"birthday\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Birthday in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Birthday;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Birthday) {\r\n                        this._BirthdayChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Birthday = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"birthdayChanged\", {\r\n                get: function () {\r\n                    return this._BirthdayChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"fileAs\", {\r\n                /// <summary>\r\n                /// There are no comments for Property FileAs in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._FileAs;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._FileAs) {\r\n                        this._FileAsChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._FileAs = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"fileAsChanged\", {\r\n                get: function () {\r\n                    return this._FileAsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"displayName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DisplayName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DisplayName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DisplayName) {\r\n                        this._DisplayNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DisplayName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"displayNameChanged\", {\r\n                get: function () {\r\n                    return this._DisplayNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"givenName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property GivenName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._GivenName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._GivenName) {\r\n                        this._GivenNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._GivenName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"givenNameChanged\", {\r\n                get: function () {\r\n                    return this._GivenNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"initials\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Initials in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Initials;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Initials) {\r\n                        this._InitialsChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Initials = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"initialsChanged\", {\r\n                get: function () {\r\n                    return this._InitialsChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"middleName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property MiddleName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._MiddleName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._MiddleName) {\r\n                        this._MiddleNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._MiddleName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"middleNameChanged\", {\r\n                get: function () {\r\n                    return this._MiddleNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"nickName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property NickName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._NickName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._NickName) {\r\n                        this._NickNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._NickName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"nickNameChanged\", {\r\n                get: function () {\r\n                    return this._NickNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"surname\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Surname in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Surname;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Surname) {\r\n                        this._SurnameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Surname = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"surnameChanged\", {\r\n                get: function () {\r\n                    return this._SurnameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"title\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Title in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Title;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Title) {\r\n                        this._TitleChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Title = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"titleChanged\", {\r\n                get: function () {\r\n                    return this._TitleChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"generation\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Generation in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Generation;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Generation) {\r\n                        this._GenerationChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Generation = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"generationChanged\", {\r\n                get: function () {\r\n                    return this._GenerationChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"emailAddresses\", {\r\n                /// <summary>\r\n                /// There are no comments for Property EmailAddresses in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._EmailAddresses;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"emailAddressesChanged\", {\r\n                get: function () {\r\n                    return this._EmailAddressesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"imAddresses\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ImAddresses in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ImAddresses;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"imAddressesChanged\", {\r\n                get: function () {\r\n                    return this._ImAddressesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"jobTitle\", {\r\n                /// <summary>\r\n                /// There are no comments for Property JobTitle in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._JobTitle;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._JobTitle) {\r\n                        this._JobTitleChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._JobTitle = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"jobTitleChanged\", {\r\n                get: function () {\r\n                    return this._JobTitleChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"companyName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property CompanyName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._CompanyName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._CompanyName) {\r\n                        this._CompanyNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._CompanyName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"companyNameChanged\", {\r\n                get: function () {\r\n                    return this._CompanyNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"department\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Department in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Department;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Department) {\r\n                        this._DepartmentChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Department = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"departmentChanged\", {\r\n                get: function () {\r\n                    return this._DepartmentChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"officeLocation\", {\r\n                /// <summary>\r\n                /// There are no comments for Property OfficeLocation in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._OfficeLocation;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._OfficeLocation) {\r\n                        this._OfficeLocationChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._OfficeLocation = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"officeLocationChanged\", {\r\n                get: function () {\r\n                    return this._OfficeLocationChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"profession\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Profession in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Profession;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Profession) {\r\n                        this._ProfessionChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Profession = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"professionChanged\", {\r\n                get: function () {\r\n                    return this._ProfessionChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"businessHomePage\", {\r\n                /// <summary>\r\n                /// There are no comments for Property BusinessHomePage in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._BusinessHomePage;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._BusinessHomePage) {\r\n                        this._BusinessHomePageChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._BusinessHomePage = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"businessHomePageChanged\", {\r\n                get: function () {\r\n                    return this._BusinessHomePageChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"assistantName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property AssistantName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._AssistantName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._AssistantName) {\r\n                        this._AssistantNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._AssistantName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"assistantNameChanged\", {\r\n                get: function () {\r\n                    return this._AssistantNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"manager\", {\r\n                /// <summary>\r\n                /// There are no comments for Property Manager in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._Manager;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._Manager) {\r\n                        this._ManagerChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._Manager = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"managerChanged\", {\r\n                get: function () {\r\n                    return this._ManagerChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"homePhones\", {\r\n                /// <summary>\r\n                /// There are no comments for Property HomePhones in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._HomePhones;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"homePhonesChanged\", {\r\n                get: function () {\r\n                    return this._HomePhonesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"businessPhones\", {\r\n                /// <summary>\r\n                /// There are no comments for Property BusinessPhones in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._BusinessPhones;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"businessPhonesChanged\", {\r\n                get: function () {\r\n                    return this._BusinessPhonesChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"mobilePhone1\", {\r\n                /// <summary>\r\n                /// There are no comments for Property MobilePhone1 in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._MobilePhone1;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._MobilePhone1) {\r\n                        this._MobilePhone1Changed = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._MobilePhone1 = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"mobilePhone1Changed\", {\r\n                get: function () {\r\n                    return this._MobilePhone1Changed;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"homeAddress\", {\r\n                /// <summary>\r\n                /// There are no comments for Property HomeAddress in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._HomeAddress;\r\n                },\r\n                set: function (value) {\r\n                    if (this._HomeAddress) {\r\n                        this._HomeAddress.removeChangedListener(this._HomeAddressChangedListener);\r\n                    }\r\n                    if (value !== this._HomeAddress) {\r\n                        this._HomeAddressChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._HomeAddress) {\r\n                        this._HomeAddress.addChangedListener(this._HomeAddressChangedListener);\r\n                    }\r\n                    this._HomeAddress = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"homeAddressChanged\", {\r\n                get: function () {\r\n                    return this._HomeAddressChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"businessAddress\", {\r\n                /// <summary>\r\n                /// There are no comments for Property BusinessAddress in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._BusinessAddress;\r\n                },\r\n                set: function (value) {\r\n                    if (this._BusinessAddress) {\r\n                        this._BusinessAddress.removeChangedListener(this._BusinessAddressChangedListener);\r\n                    }\r\n                    if (value !== this._BusinessAddress) {\r\n                        this._BusinessAddressChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._BusinessAddress) {\r\n                        this._BusinessAddress.addChangedListener(this._BusinessAddressChangedListener);\r\n                    }\r\n                    this._BusinessAddress = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"businessAddressChanged\", {\r\n                get: function () {\r\n                    return this._BusinessAddressChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"otherAddress\", {\r\n                /// <summary>\r\n                /// There are no comments for Property OtherAddress in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._OtherAddress;\r\n                },\r\n                set: function (value) {\r\n                    if (this._OtherAddress) {\r\n                        this._OtherAddress.removeChangedListener(this._OtherAddressChangedListener);\r\n                    }\r\n                    if (value !== this._OtherAddress) {\r\n                        this._OtherAddressChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    if (this._OtherAddress) {\r\n                        this._OtherAddress.addChangedListener(this._OtherAddressChangedListener);\r\n                    }\r\n                    this._OtherAddress = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"otherAddressChanged\", {\r\n                get: function () {\r\n                    return this._OtherAddressChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"yomiCompanyName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property YomiCompanyName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._YomiCompanyName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._YomiCompanyName) {\r\n                        this._YomiCompanyNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._YomiCompanyName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"yomiCompanyNameChanged\", {\r\n                get: function () {\r\n                    return this._YomiCompanyNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"yomiGivenName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property YomiGivenName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._YomiGivenName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._YomiGivenName) {\r\n                        this._YomiGivenNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._YomiGivenName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"yomiGivenNameChanged\", {\r\n                get: function () {\r\n                    return this._YomiGivenNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Contact.prototype, \"yomiSurname\", {\r\n                /// <summary>\r\n                /// There are no comments for Property YomiSurname in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._YomiSurname;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._YomiSurname) {\r\n                        this._YomiSurnameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._YomiSurname = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(Contact.prototype, \"yomiSurnameChanged\", {\r\n                get: function () {\r\n                    return this._YomiSurnameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Contact.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(Contact.parseContact(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Contact.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            Contact.parseContact = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new Contact(context, path, data);\r\n            };\r\n\r\n            Contact.parseContacts = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(Contact.parseContact(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            Contact.prototype.getRequestBody = function () {\r\n                return {\r\n                    ParentFolderId: (this.parentFolderIdChanged && this.parentFolderId) ? this.parentFolderId : undefined,\r\n                    Birthday: (this.birthdayChanged && this.birthday) ? this.birthday.toString() : undefined,\r\n                    FileAs: (this.fileAsChanged && this.fileAs) ? this.fileAs : undefined,\r\n                    DisplayName: (this.displayNameChanged && this.displayName) ? this.displayName : undefined,\r\n                    GivenName: (this.givenNameChanged && this.givenName) ? this.givenName : undefined,\r\n                    Initials: (this.initialsChanged && this.initials) ? this.initials : undefined,\r\n                    MiddleName: (this.middleNameChanged && this.middleName) ? this.middleName : undefined,\r\n                    NickName: (this.nickNameChanged && this.nickName) ? this.nickName : undefined,\r\n                    Surname: (this.surnameChanged && this.surname) ? this.surname : undefined,\r\n                    Title: (this.titleChanged && this.title) ? this.title : undefined,\r\n                    Generation: (this.generationChanged && this.generation) ? this.generation : undefined,\r\n                    EmailAddresses: (this.emailAddressesChanged) ? (function (EmailAddresses) {\r\n                        if (!EmailAddresses) {\r\n                            return undefined;\r\n                        }\r\n                        var converted = [];\r\n                        EmailAddresses.forEach(function (value, index, array) {\r\n                            converted.push(value.getRequestBody());\r\n                        });\r\n                        return converted;\r\n                    })(this.emailAddresses) : undefined,\r\n                    ImAddresses: (this.imAddressesChanged && this.imAddresses) ? this.imAddresses : undefined,\r\n                    JobTitle: (this.jobTitleChanged && this.jobTitle) ? this.jobTitle : undefined,\r\n                    CompanyName: (this.companyNameChanged && this.companyName) ? this.companyName : undefined,\r\n                    Department: (this.departmentChanged && this.department) ? this.department : undefined,\r\n                    OfficeLocation: (this.officeLocationChanged && this.officeLocation) ? this.officeLocation : undefined,\r\n                    Profession: (this.professionChanged && this.profession) ? this.profession : undefined,\r\n                    BusinessHomePage: (this.businessHomePageChanged && this.businessHomePage) ? this.businessHomePage : undefined,\r\n                    AssistantName: (this.assistantNameChanged && this.assistantName) ? this.assistantName : undefined,\r\n                    Manager: (this.managerChanged && this.manager) ? this.manager : undefined,\r\n                    HomePhones: (this.homePhonesChanged && this.homePhones) ? this.homePhones : undefined,\r\n                    BusinessPhones: (this.businessPhonesChanged && this.businessPhones) ? this.businessPhones : undefined,\r\n                    MobilePhone1: (this.mobilePhone1Changed && this.mobilePhone1) ? this.mobilePhone1 : undefined,\r\n                    HomeAddress: (this.homeAddressChanged && this.homeAddress) ? this.homeAddress.getRequestBody() : undefined,\r\n                    BusinessAddress: (this.businessAddressChanged && this.businessAddress) ? this.businessAddress.getRequestBody() : undefined,\r\n                    OtherAddress: (this.otherAddressChanged && this.otherAddress) ? this.otherAddress.getRequestBody() : undefined,\r\n                    YomiCompanyName: (this.yomiCompanyNameChanged && this.yomiCompanyName) ? this.yomiCompanyName : undefined,\r\n                    YomiGivenName: (this.yomiGivenNameChanged && this.yomiGivenName) ? this.yomiGivenName : undefined,\r\n                    YomiSurname: (this.yomiSurnameChanged && this.yomiSurname) ? this.yomiSurname : undefined,\r\n                    ChangeKey: (this.changeKeyChanged && this.changeKey) ? this.changeKey : undefined,\r\n                    Categories: (this.categoriesChanged && this.categories) ? this.categories : undefined,\r\n                    DateTimeCreated: (this.dateTimeCreatedChanged && this.dateTimeCreated) ? this.dateTimeCreated.toString() : undefined,\r\n                    DateTimeLastModified: (this.dateTimeLastModifiedChanged && this.dateTimeLastModified) ? this.dateTimeLastModified.toString() : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return Contact;\r\n        })(Item);\r\n        OutlookServices.Contact = Contact;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ContactFolder in the schema.\r\n        /// </summary>\r\n        var ContactFolderFetcher = (function (_super) {\r\n            __extends(ContactFolderFetcher, _super);\r\n            function ContactFolderFetcher(context, path) {\r\n                _super.call(this, context, path);\r\n            }\r\n            Object.defineProperty(ContactFolderFetcher.prototype, \"contacts\", {\r\n                get: function () {\r\n                    if (this._Contacts === undefined) {\r\n                        this._Contacts = new Microsoft.OutlookServices.Contacts(this.context, this.getPath('Contacts'));\r\n                    }\r\n                    return this._Contacts;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(ContactFolderFetcher.prototype, \"childFolders\", {\r\n                get: function () {\r\n                    if (this._ChildFolders === undefined) {\r\n                        this._ChildFolders = new Microsoft.OutlookServices.ContactFolders(this.context, this.getPath('ChildFolders'));\r\n                    }\r\n                    return this._ChildFolders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            ContactFolderFetcher.prototype.fetch = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                this.context.readUrl(this.path).then((function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(ContactFolder.parseContactFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }).bind(this), deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n            return ContactFolderFetcher;\r\n        })(EntityFetcher);\r\n        OutlookServices.ContactFolderFetcher = ContactFolderFetcher;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ContactFolder in the schema.\r\n        /// </summary>\r\n        var ContactFolder = (function (_super) {\r\n            __extends(ContactFolder, _super);\r\n            function ContactFolder(context, path, data) {\r\n                _super.call(this, context, path, data);\r\n                this._odataType = 'Microsoft.OutlookServices.ContactFolder';\r\n                this._ParentFolderIdChanged = false;\r\n                this._DisplayNameChanged = false;\r\n\r\n                if (!data) {\r\n                    return;\r\n                }\r\n\r\n                this._ParentFolderId = data.ParentFolderId;\r\n                this._DisplayName = data.DisplayName;\r\n            }\r\n            Object.defineProperty(ContactFolder.prototype, \"parentFolderId\", {\r\n                /// <summary>\r\n                /// There are no comments for Property ParentFolderId in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._ParentFolderId;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._ParentFolderId) {\r\n                        this._ParentFolderIdChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._ParentFolderId = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(ContactFolder.prototype, \"parentFolderIdChanged\", {\r\n                get: function () {\r\n                    return this._ParentFolderIdChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(ContactFolder.prototype, \"displayName\", {\r\n                /// <summary>\r\n                /// There are no comments for Property DisplayName in the schema.\r\n                /// </summary>\r\n                get: function () {\r\n                    return this._DisplayName;\r\n                },\r\n                set: function (value) {\r\n                    if (value !== this._DisplayName) {\r\n                        this._DisplayNameChanged = true;\r\n                        this.changed = true;\r\n                    }\r\n                    this._DisplayName = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n\r\n            Object.defineProperty(ContactFolder.prototype, \"displayNameChanged\", {\r\n                get: function () {\r\n                    return this._DisplayNameChanged;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(ContactFolder.prototype, \"contacts\", {\r\n                get: function () {\r\n                    if (this._Contacts === undefined) {\r\n                        this._Contacts = new Microsoft.OutlookServices.Contacts(this.context, this.getPath('Contacts'));\r\n                    }\r\n                    return this._Contacts;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(ContactFolder.prototype, \"childFolders\", {\r\n                get: function () {\r\n                    if (this._ChildFolders === undefined) {\r\n                        this._ChildFolders = new Microsoft.OutlookServices.ContactFolders(this.context, this.getPath('ChildFolders'));\r\n                    }\r\n                    return this._ChildFolders;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            ContactFolder.prototype.update = function () {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'PATCH';\r\n                request.data = JSON.stringify(this.getRequestBody());\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    var parsedData = JSON.parse(data);\r\n                    deferred.resolve(ContactFolder.parseContactFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            ContactFolder.prototype.delete = function () {\r\n                var deferred = new Microsoft.Utility.Deferred(), request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                request.method = 'DELETE';\r\n\r\n                this.context.request(request).then(function (data) {\r\n                    deferred.resolve(null);\r\n                }, deferred.reject.bind(deferred));\r\n\r\n                return deferred;\r\n            };\r\n\r\n            ContactFolder.parseContactFolder = function (context, path, data) {\r\n                if (!data)\r\n                    return null;\r\n\r\n                return new ContactFolder(context, path, data);\r\n            };\r\n\r\n            ContactFolder.parseContactFolders = function (context, pathFn, data) {\r\n                var results = [];\r\n\r\n                if (data) {\r\n                    for (var i = 0; i < data.length; ++i) {\r\n                        results.push(ContactFolder.parseContactFolder(context, pathFn(data[i]), data[i]));\r\n                    }\r\n                }\r\n\r\n                return results;\r\n            };\r\n\r\n            ContactFolder.prototype.getRequestBody = function () {\r\n                return {\r\n                    ParentFolderId: (this.parentFolderIdChanged && this.parentFolderId) ? this.parentFolderId : undefined,\r\n                    DisplayName: (this.displayNameChanged && this.displayName) ? this.displayName : undefined,\r\n                    Id: (this.idChanged && this.id) ? this.id : undefined,\r\n                    '@odata.type': this._odataType\r\n                };\r\n            };\r\n            return ContactFolder;\r\n        })(Entity);\r\n        OutlookServices.ContactFolder = ContactFolder;\r\n\r\n        /// <summary>\r\n        /// There are no comments for DayOfWeek in the schema.\r\n        /// </summary>\r\n        (function (DayOfWeek) {\r\n            DayOfWeek[DayOfWeek[\"Sunday\"] = 0] = \"Sunday\";\r\n            DayOfWeek[DayOfWeek[\"Monday\"] = 1] = \"Monday\";\r\n            DayOfWeek[DayOfWeek[\"Tuesday\"] = 2] = \"Tuesday\";\r\n            DayOfWeek[DayOfWeek[\"Wednesday\"] = 3] = \"Wednesday\";\r\n            DayOfWeek[DayOfWeek[\"Thursday\"] = 4] = \"Thursday\";\r\n            DayOfWeek[DayOfWeek[\"Friday\"] = 5] = \"Friday\";\r\n            DayOfWeek[DayOfWeek[\"Saturday\"] = 6] = \"Saturday\";\r\n        })(OutlookServices.DayOfWeek || (OutlookServices.DayOfWeek = {}));\r\n        var DayOfWeek = OutlookServices.DayOfWeek;\r\n\r\n        /// <summary>\r\n        /// There are no comments for BodyType in the schema.\r\n        /// </summary>\r\n        (function (BodyType) {\r\n            BodyType[BodyType[\"Text\"] = 0] = \"Text\";\r\n            BodyType[BodyType[\"HTML\"] = 1] = \"HTML\";\r\n        })(OutlookServices.BodyType || (OutlookServices.BodyType = {}));\r\n        var BodyType = OutlookServices.BodyType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for Importance in the schema.\r\n        /// </summary>\r\n        (function (Importance) {\r\n            Importance[Importance[\"Low\"] = 0] = \"Low\";\r\n            Importance[Importance[\"Normal\"] = 1] = \"Normal\";\r\n            Importance[Importance[\"High\"] = 2] = \"High\";\r\n        })(OutlookServices.Importance || (OutlookServices.Importance = {}));\r\n        var Importance = OutlookServices.Importance;\r\n\r\n        /// <summary>\r\n        /// There are no comments for AttendeeType in the schema.\r\n        /// </summary>\r\n        (function (AttendeeType) {\r\n            AttendeeType[AttendeeType[\"Required\"] = 0] = \"Required\";\r\n            AttendeeType[AttendeeType[\"Optional\"] = 1] = \"Optional\";\r\n            AttendeeType[AttendeeType[\"Resource\"] = 2] = \"Resource\";\r\n        })(OutlookServices.AttendeeType || (OutlookServices.AttendeeType = {}));\r\n        var AttendeeType = OutlookServices.AttendeeType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for ResponseType in the schema.\r\n        /// </summary>\r\n        (function (ResponseType) {\r\n            ResponseType[ResponseType[\"None\"] = 0] = \"None\";\r\n            ResponseType[ResponseType[\"Organizer\"] = 1] = \"Organizer\";\r\n            ResponseType[ResponseType[\"TentativelyAccepted\"] = 2] = \"TentativelyAccepted\";\r\n            ResponseType[ResponseType[\"Accepted\"] = 3] = \"Accepted\";\r\n            ResponseType[ResponseType[\"Declined\"] = 4] = \"Declined\";\r\n            ResponseType[ResponseType[\"NotResponded\"] = 5] = \"NotResponded\";\r\n        })(OutlookServices.ResponseType || (OutlookServices.ResponseType = {}));\r\n        var ResponseType = OutlookServices.ResponseType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for EventType in the schema.\r\n        /// </summary>\r\n        (function (EventType) {\r\n            EventType[EventType[\"SingleInstance\"] = 0] = \"SingleInstance\";\r\n            EventType[EventType[\"Occurrence\"] = 1] = \"Occurrence\";\r\n            EventType[EventType[\"Exception\"] = 2] = \"Exception\";\r\n            EventType[EventType[\"SeriesMaster\"] = 3] = \"SeriesMaster\";\r\n        })(OutlookServices.EventType || (OutlookServices.EventType = {}));\r\n        var EventType = OutlookServices.EventType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for FreeBusyStatus in the schema.\r\n        /// </summary>\r\n        (function (FreeBusyStatus) {\r\n            FreeBusyStatus[FreeBusyStatus[\"Free\"] = 0] = \"Free\";\r\n            FreeBusyStatus[FreeBusyStatus[\"Tentative\"] = 1] = \"Tentative\";\r\n            FreeBusyStatus[FreeBusyStatus[\"Busy\"] = 2] = \"Busy\";\r\n            FreeBusyStatus[FreeBusyStatus[\"Oof\"] = 3] = \"Oof\";\r\n            FreeBusyStatus[FreeBusyStatus[\"WorkingElsewhere\"] = 4] = \"WorkingElsewhere\";\r\n            FreeBusyStatus[FreeBusyStatus[\"Unknown\"] = -1] = \"Unknown\";\r\n        })(OutlookServices.FreeBusyStatus || (OutlookServices.FreeBusyStatus = {}));\r\n        var FreeBusyStatus = OutlookServices.FreeBusyStatus;\r\n\r\n        /// <summary>\r\n        /// There are no comments for MeetingMessageType in the schema.\r\n        /// </summary>\r\n        (function (MeetingMessageType) {\r\n            MeetingMessageType[MeetingMessageType[\"None\"] = 0] = \"None\";\r\n            MeetingMessageType[MeetingMessageType[\"MeetingRequest\"] = 1] = \"MeetingRequest\";\r\n            MeetingMessageType[MeetingMessageType[\"MeetingCancelled\"] = 2] = \"MeetingCancelled\";\r\n            MeetingMessageType[MeetingMessageType[\"MeetingAccepted\"] = 3] = \"MeetingAccepted\";\r\n            MeetingMessageType[MeetingMessageType[\"MeetingTenativelyAccepted\"] = 4] = \"MeetingTenativelyAccepted\";\r\n            MeetingMessageType[MeetingMessageType[\"MeetingDeclined\"] = 5] = \"MeetingDeclined\";\r\n        })(OutlookServices.MeetingMessageType || (OutlookServices.MeetingMessageType = {}));\r\n        var MeetingMessageType = OutlookServices.MeetingMessageType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for RecurrencePatternType in the schema.\r\n        /// </summary>\r\n        (function (RecurrencePatternType) {\r\n            RecurrencePatternType[RecurrencePatternType[\"Daily\"] = 0] = \"Daily\";\r\n            RecurrencePatternType[RecurrencePatternType[\"Weekly\"] = 1] = \"Weekly\";\r\n            RecurrencePatternType[RecurrencePatternType[\"AbsoluteMonthly\"] = 2] = \"AbsoluteMonthly\";\r\n            RecurrencePatternType[RecurrencePatternType[\"RelativeMonthly\"] = 3] = \"RelativeMonthly\";\r\n            RecurrencePatternType[RecurrencePatternType[\"AbsoluteYearly\"] = 4] = \"AbsoluteYearly\";\r\n            RecurrencePatternType[RecurrencePatternType[\"RelativeYearly\"] = 5] = \"RelativeYearly\";\r\n        })(OutlookServices.RecurrencePatternType || (OutlookServices.RecurrencePatternType = {}));\r\n        var RecurrencePatternType = OutlookServices.RecurrencePatternType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for RecurrenceRangeType in the schema.\r\n        /// </summary>\r\n        (function (RecurrenceRangeType) {\r\n            RecurrenceRangeType[RecurrenceRangeType[\"EndDate\"] = 0] = \"EndDate\";\r\n            RecurrenceRangeType[RecurrenceRangeType[\"NoEnd\"] = 1] = \"NoEnd\";\r\n            RecurrenceRangeType[RecurrenceRangeType[\"Numbered\"] = 2] = \"Numbered\";\r\n        })(OutlookServices.RecurrenceRangeType || (OutlookServices.RecurrenceRangeType = {}));\r\n        var RecurrenceRangeType = OutlookServices.RecurrenceRangeType;\r\n\r\n        /// <summary>\r\n        /// There are no comments for WeekIndex in the schema.\r\n        /// </summary>\r\n        (function (WeekIndex) {\r\n            WeekIndex[WeekIndex[\"First\"] = 0] = \"First\";\r\n            WeekIndex[WeekIndex[\"Second\"] = 1] = \"Second\";\r\n            WeekIndex[WeekIndex[\"Third\"] = 2] = \"Third\";\r\n            WeekIndex[WeekIndex[\"Fourth\"] = 3] = \"Fourth\";\r\n            WeekIndex[WeekIndex[\"Last\"] = 4] = \"Last\";\r\n        })(OutlookServices.WeekIndex || (OutlookServices.WeekIndex = {}));\r\n        var WeekIndex = OutlookServices.WeekIndex;\r\n        var Users = (function (_super) {\r\n            __extends(Users, _super);\r\n            function Users(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return User.parseUsers(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Users.prototype.getUser = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new UserFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Users.prototype.getUsers = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Users.prototype.addUser = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(User.parseUser(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return Users;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Users = Users;\r\n        var Folders = (function (_super) {\r\n            __extends(Folders, _super);\r\n            function Folders(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return Folder.parseFolders(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Folders.prototype.getFolder = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new FolderFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Folders.prototype.getFolders = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Folders.prototype.addFolder = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(Folder.parseFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return Folders;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Folders = Folders;\r\n        var Messages = (function (_super) {\r\n            __extends(Messages, _super);\r\n            function Messages(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return Message.parseMessages(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Messages.prototype.getMessage = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new MessageFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Messages.prototype.getMessages = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Messages.prototype.addMessage = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(Message.parseMessage(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return Messages;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Messages = Messages;\r\n        var Calendars = (function (_super) {\r\n            __extends(Calendars, _super);\r\n            function Calendars(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return Calendar.parseCalendars(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Calendars.prototype.getCalendar = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new CalendarFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Calendars.prototype.getCalendars = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Calendars.prototype.addCalendar = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(Calendar.parseCalendar(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return Calendars;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Calendars = Calendars;\r\n        var CalendarGroups = (function (_super) {\r\n            __extends(CalendarGroups, _super);\r\n            function CalendarGroups(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return CalendarGroup.parseCalendarGroups(context, pathFn, data.value);\r\n                };\r\n            }\r\n            CalendarGroups.prototype.getCalendarGroup = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new CalendarGroupFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            CalendarGroups.prototype.getCalendarGroups = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            CalendarGroups.prototype.addCalendarGroup = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(CalendarGroup.parseCalendarGroup(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return CalendarGroups;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.CalendarGroups = CalendarGroups;\r\n        var Events = (function (_super) {\r\n            __extends(Events, _super);\r\n            function Events(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return Event.parseEvents(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Events.prototype.getEvent = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new EventFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Events.prototype.getEvents = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Events.prototype.addEvent = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(Event.parseEvent(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return Events;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Events = Events;\r\n        var Contacts = (function (_super) {\r\n            __extends(Contacts, _super);\r\n            function Contacts(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return Contact.parseContacts(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Contacts.prototype.getContact = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new ContactFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Contacts.prototype.getContacts = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Contacts.prototype.addContact = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(Contact.parseContact(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return Contacts;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Contacts = Contacts;\r\n        var ContactFolders = (function (_super) {\r\n            __extends(ContactFolders, _super);\r\n            function ContactFolders(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return ContactFolder.parseContactFolders(context, pathFn, data.value);\r\n                };\r\n            }\r\n            ContactFolders.prototype.getContactFolder = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new ContactFolderFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            ContactFolders.prototype.getContactFolders = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            ContactFolders.prototype.addContactFolder = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(ContactFolder.parseContactFolder(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            return ContactFolders;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.ContactFolders = ContactFolders;\r\n        var Attachments = (function (_super) {\r\n            __extends(Attachments, _super);\r\n            function Attachments(context, path, entity) {\r\n                _super.call(this, context, path, entity);\r\n\r\n                this._parseCollectionFn = function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return Attachment.parseAttachments(context, pathFn, data.value);\r\n                };\r\n            }\r\n            Attachments.prototype.getAttachment = function (Id) {\r\n                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: \"Id\", type: \"Edm.String\", value: Id }]);\r\n                var fetcher = new AttachmentFetcher(this.context, path);\r\n                return fetcher;\r\n            };\r\n\r\n            Attachments.prototype.getAttachments = function () {\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);\r\n            };\r\n\r\n            Attachments.prototype.addAttachment = function (item) {\r\n                var _this = this;\r\n                var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                if (this.entity == null) {\r\n                    var request = new Microsoft.OutlookServices.Extensions.Request(this.path);\r\n\r\n                    request.method = 'POST';\r\n                    request.data = JSON.stringify(item.getRequestBody());\r\n\r\n                    this.context.request(request).then((function (data) {\r\n                        var parsedData = JSON.parse(data);\r\n                        deferred.resolve(Attachment.parseAttachment(_this.context, parsedData['@odata.id'], parsedData));\r\n                    }).bind(this), deferred.reject.bind(deferred));\r\n                } else {\r\n                    //UNDONE this.context.AddLink(_entity, _path, item);\r\n                }\r\n\r\n                return deferred;\r\n            };\r\n            Attachments.prototype.asFileAttachments = function () {\r\n                var parseCollectionFn = (function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return FileAttachment.parseFileAttachments(context, pathFn, data.value);\r\n                }).bind(this);\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path + '/$/Microsoft.OutlookServices.FileAttachment()', parseCollectionFn);\r\n            };\r\n            Attachments.prototype.asItemAttachments = function () {\r\n                var parseCollectionFn = (function (context, data) {\r\n                    var pathFn = function (data) {\r\n                        return data['@odata.id'];\r\n                    };\r\n                    return ItemAttachment.parseItemAttachments(context, pathFn, data.value);\r\n                }).bind(this);\r\n                return new Microsoft.OutlookServices.Extensions.CollectionQuery(this.context, this.path + '/$/Microsoft.OutlookServices.ItemAttachment()', parseCollectionFn);\r\n            };\r\n            return Attachments;\r\n        })(OutlookServices.Extensions.QueryableSet);\r\n        OutlookServices.Attachments = Attachments;\r\n    })(Microsoft.OutlookServices || (Microsoft.OutlookServices = {}));\r\n    var OutlookServices = Microsoft.OutlookServices;\r\n})(Microsoft || (Microsoft = {}));\r\n//# sourceMappingURL=exchange.js.map\r\n","/home/travis/build/npmtest/node-npmtest-node-outlook/node_modules/node-outlook/exchange-lib/utility.js":"var __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    (function (Utility) {\r\n        (function (EncodingHelpers) {\r\n            function getKeyExpression(entityKeys) {\r\n                var entityInstanceKey = '(';\r\n\r\n                if (entityKeys.length == 1) {\r\n                    entityInstanceKey += formatLiteral(entityKeys[0]);\r\n                } else {\r\n                    var addComma = false;\r\n                    for (var i = 0; i < entityKeys.length; i++) {\r\n                        if (addComma) {\r\n                            entityInstanceKey += ',';\r\n                        } else {\r\n                            addComma = true;\r\n                        }\r\n\r\n                        entityInstanceKey += entityKeys[i].name + '=' + formatLiteral(entityKeys[i]);\r\n                    }\r\n                }\r\n\r\n                entityInstanceKey += ')';\r\n\r\n                return entityInstanceKey;\r\n            }\r\n            EncodingHelpers.getKeyExpression = getKeyExpression;\r\n\r\n            function formatLiteral(literal) {\r\n                /// <summary>Formats a value according to Uri literal format</summary>\r\n                /// <param name=\"value\">Value to be formatted.</param>\r\n                /// <param name=\"type\">Edm type of the value</param>\r\n                /// <returns type=\"string\">Value after formatting</returns>\r\n                var result = \"\" + formatRowLiteral(literal.value, literal.type);\r\n\r\n                result = encodeURIComponent(result.replace(\"'\", \"''\"));\r\n\r\n                switch ((literal.type)) {\r\n                    case \"Edm.Binary\":\r\n                        return \"X'\" + result + \"'\";\r\n                    case \"Edm.DateTime\":\r\n                        return \"datetime\" + \"'\" + result + \"'\";\r\n                    case \"Edm.DateTimeOffset\":\r\n                        return \"datetimeoffset\" + \"'\" + result + \"'\";\r\n                    case \"Edm.Decimal\":\r\n                        return result + \"M\";\r\n                    case \"Edm.Guid\":\r\n                        return \"guid\" + \"'\" + result + \"'\";\r\n                    case \"Edm.Int64\":\r\n                        return result + \"L\";\r\n                    case \"Edm.Float\":\r\n                        return result + \"f\";\r\n                    case \"Edm.Double\":\r\n                        return result + \"D\";\r\n                    case \"Edm.Geography\":\r\n                        return \"geography\" + \"'\" + result + \"'\";\r\n                    case \"Edm.Geometry\":\r\n                        return \"geometry\" + \"'\" + result + \"'\";\r\n                    case \"Edm.Time\":\r\n                        return \"time\" + \"'\" + result + \"'\";\r\n                    case \"Edm.String\":\r\n                        return \"'\" + result + \"'\";\r\n                    default:\r\n                        return result;\r\n                }\r\n            }\r\n            EncodingHelpers.formatLiteral = formatLiteral;\r\n\r\n            function formatRowLiteral(value, type) {\r\n                switch (type) {\r\n                    case \"Edm.Binary\":\r\n                        return Microsoft.Utility.decodeBase64AsHexString(value);\r\n                    default:\r\n                        return value;\r\n                }\r\n            }\r\n        })(Utility.EncodingHelpers || (Utility.EncodingHelpers = {}));\r\n        var EncodingHelpers = Utility.EncodingHelpers;\r\n\r\n        function findProperties(o) {\r\n            var aPropertiesAndMethods = [];\r\n\r\n            do {\r\n                aPropertiesAndMethods = aPropertiesAndMethods.concat(Object.getOwnPropertyNames(o));\r\n            } while(o = Object.getPrototypeOf(o));\r\n\r\n            for (var a = 0; a < aPropertiesAndMethods.length; ++a) {\r\n                for (var b = a + 1; b < aPropertiesAndMethods.length; ++b) {\r\n                    if (aPropertiesAndMethods[a] === aPropertiesAndMethods[b]) {\r\n                        aPropertiesAndMethods.splice(a--, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return aPropertiesAndMethods;\r\n        }\r\n        Utility.findProperties = findProperties;\r\n\r\n        function decodeBase64AsHexString(base64) {\r\n            var decoded = decodeBase64(base64), hexValue = \"\", hexValues = \"0123456789ABCDEF\";\r\n\r\n            for (var j = 0; j < decoded.length; j++) {\r\n                var byte = decoded[j];\r\n                hexValue += hexValues[byte >> 4];\r\n                hexValue += hexValues[byte & 0x0F];\r\n            }\r\n\r\n            return hexValue;\r\n        }\r\n        Utility.decodeBase64AsHexString = decodeBase64AsHexString;\r\n\r\n        function decodeBase64(base64) {\r\n            var decoded = [];\r\n\r\n            if (window.atob !== undefined) {\r\n                var binaryStr = window.atob(base64);\r\n                for (var i = 0; i < binaryStr.length; i++) {\r\n                    decoded.push(binaryStr.charCodeAt(i));\r\n                }\r\n                return decoded;\r\n            }\r\n\r\n            for (var index = 0; index < base64.length; index += 4) {\r\n                var sextet1 = getBase64Sextet(base64[index]);\r\n                var sextet2 = getBase64Sextet(base64[index + 1]);\r\n                var sextet3 = (index + 2 < base64.length) ? getBase64Sextet(base64[index + 2]) : null;\r\n                var sextet4 = (index + 3 < base64.length) ? getBase64Sextet(base64[index + 3]) : null;\r\n                decoded.push((sextet1 << 2) | (sextet2 >> 4));\r\n                if (sextet3)\r\n                    decoded.push(((sextet2 & 0xF) << 4) | (sextet3 >> 2));\r\n                if (sextet4)\r\n                    decoded.push(((sextet3 & 0x3) << 6) | sextet4);\r\n            }\r\n\r\n            return decoded;\r\n        }\r\n        Utility.decodeBase64 = decodeBase64;\r\n\r\n        function decodeBase64AsString(base64) {\r\n            var decoded = decodeBase64(base64), decoded_string;\r\n\r\n            decoded.forEach(function (value, index, decoded_access_token) {\r\n                if (!decoded_string) {\r\n                    decoded_string = String.fromCharCode(value);\r\n                } else {\r\n                    decoded_string += String.fromCharCode(value);\r\n                }\r\n            });\r\n\r\n            return decoded_string;\r\n        }\r\n        Utility.decodeBase64AsString = decodeBase64AsString;\r\n\r\n        function getBase64Sextet(character) {\r\n            var code = character.charCodeAt(0);\r\n\r\n            if (code >= 65 && code <= 90)\r\n                return code - 65;\r\n\r\n            if (code >= 97 && code <= 122)\r\n                return code - 71;\r\n\r\n            if (code >= 48 && code <= 57)\r\n                return code + 4;\r\n\r\n            if (character === \"+\")\r\n                return 62;\r\n\r\n            if (character === \"/\")\r\n                return 63;\r\n\r\n            return null;\r\n        }\r\n\r\n        var Exception = (function () {\r\n            function Exception(message, innerException) {\r\n                this._message = message;\r\n                if (innerException) {\r\n                    this._innerException = innerException;\r\n                }\r\n            }\r\n            Object.defineProperty(Exception.prototype, \"message\", {\r\n                get: function () {\r\n                    return this._message;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n\r\n            Object.defineProperty(Exception.prototype, \"innerException\", {\r\n                get: function () {\r\n                    return this._innerException;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            return Exception;\r\n        })();\r\n        Utility.Exception = Exception;\r\n\r\n        var HttpException = (function (_super) {\r\n            __extends(HttpException, _super);\r\n            function HttpException(XHR, innerException) {\r\n                _super.call(this, XHR.statusText, innerException);\r\n                this.getHeaders = this.getHeadersFn(XHR);\r\n            }\r\n            HttpException.prototype.getHeadersFn = function (xhr) {\r\n                return function (headerName) {\r\n                    if (headerName && headerName.length > 0) {\r\n                        return xhr.getResponseHeader(headerName);\r\n                    } else {\r\n                        return xhr.getAllResponseHeaders();\r\n                    }\r\n                    ;\r\n                };\r\n            };\r\n\r\n            Object.defineProperty(HttpException.prototype, \"xhr\", {\r\n                get: function () {\r\n                    return this._xhr;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            return HttpException;\r\n        })(Exception);\r\n        Utility.HttpException = HttpException;\r\n\r\n        var DeferredState;\r\n        (function (DeferredState) {\r\n            DeferredState[DeferredState[\"UNFULFILLED\"] = 0] = \"UNFULFILLED\";\r\n            DeferredState[DeferredState[\"RESOLVED\"] = 1] = \"RESOLVED\";\r\n            DeferredState[DeferredState[\"REJECTED\"] = 2] = \"REJECTED\";\r\n        })(DeferredState || (DeferredState = {}));\r\n\r\n        var Deferred = (function () {\r\n            function Deferred() {\r\n                this._fulfilled = function (value) {\r\n                };\r\n                this._rejected = function (reason) {\r\n                };\r\n                this._progress = function (progress) {\r\n                };\r\n                this._state = 0 /* UNFULFILLED */;\r\n            }\r\n            Deferred.prototype.then = function (onFulfilled, onRejected, onProgress) {\r\n                switch (this._state) {\r\n                    case 0 /* UNFULFILLED */:\r\n                        if (onFulfilled && typeof onFulfilled === 'function') {\r\n                            var fulfilled = this._fulfilled;\r\n                            this._fulfilled = function (value) {\r\n                                fulfilled(value);\r\n                                onFulfilled(value);\r\n                            };\r\n                        }\r\n                        if (onRejected && typeof onRejected === 'function') {\r\n                            var rejected = this._rejected;\r\n                            this._rejected = function (reason) {\r\n                                rejected(reason);\r\n                                onRejected(reason);\r\n                            };\r\n                        }\r\n                        if (onProgress && typeof onProgress === 'function') {\r\n                            var progress = this._progress;\r\n                            this._progress = function (progress) {\r\n                                progress(progress);\r\n                                onProgress(progress);\r\n                            };\r\n                        }\r\n                        break;\r\n                    case 1 /* RESOLVED */:\r\n                        if (onFulfilled && typeof onFulfilled === 'function') {\r\n                            onFulfilled(this._value);\r\n                        }\r\n                        break;\r\n                    case 2 /* REJECTED */:\r\n                        if (onRejected && typeof onRejected === 'function') {\r\n                            onRejected(this._reason);\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                return this;\r\n            };\r\n\r\n            Deferred.prototype.detach = function () {\r\n                this._fulfilled = function (value) {\r\n                };\r\n                this._rejected = function (reason) {\r\n                };\r\n                this._progress = function (progress) {\r\n                };\r\n            };\r\n\r\n            Deferred.prototype.resolve = function (value) {\r\n                if (this._state != 0 /* UNFULFILLED */) {\r\n                    throw new Microsoft.Utility.Exception(\"Invalid deferred state = \" + this._state);\r\n                }\r\n                this._value = value;\r\n                var fulfilled = this._fulfilled;\r\n                this.detach();\r\n                this._state = 1 /* RESOLVED */;\r\n                fulfilled(value);\r\n            };\r\n\r\n            Deferred.prototype.reject = function (reason) {\r\n                if (this._state != 0 /* UNFULFILLED */) {\r\n                    throw new Microsoft.Utility.Exception(\"Invalid deferred state = \" + this._state);\r\n                }\r\n                this._reason = reason;\r\n                var rejected = this._rejected;\r\n                this.detach();\r\n                this._state = 2 /* REJECTED */;\r\n                rejected(reason);\r\n            };\r\n\r\n            Deferred.prototype.notify = function (progress) {\r\n                if (this._state != 0 /* UNFULFILLED */) {\r\n                    throw new Microsoft.Utility.Exception(\"Invalid deferred state = \" + this._state);\r\n                }\r\n                this._progress(progress);\r\n            };\r\n            return Deferred;\r\n        })();\r\n        Utility.Deferred = Deferred;\r\n\r\n        (function (HttpHelpers) {\r\n            var Request = (function () {\r\n                function Request(requestUri, method, data) {\r\n                    this.requestUri = requestUri;\r\n                    this.method = method;\r\n                    this.data = data;\r\n                    this.headers = {};\r\n                    this.disableCache = false;\r\n                }\r\n                return Request;\r\n            })();\r\n            HttpHelpers.Request = Request;\r\n\r\n            var AuthenticatedHttp = (function () {\r\n                function AuthenticatedHttp(getAccessTokenFn) {\r\n                    this._disableCache = false;\r\n                    this._noCache = Date.now();\r\n                    this._accept = 'application/json;q=0.9, */*;q=0.1';\r\n                    this._contentType = 'application/json';\r\n                    this._getAccessTokenFn = getAccessTokenFn;\r\n                }\r\n                Object.defineProperty(AuthenticatedHttp.prototype, \"disableCache\", {\r\n                    get: function () {\r\n                        return this._disableCache;\r\n                    },\r\n                    set: function (value) {\r\n                        this._disableCache = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                Object.defineProperty(AuthenticatedHttp.prototype, \"accept\", {\r\n                    get: function () {\r\n                        return this._accept;\r\n                    },\r\n                    set: function (value) {\r\n                        this._accept = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                Object.defineProperty(AuthenticatedHttp.prototype, \"contentType\", {\r\n                    get: function () {\r\n                        return this._contentType;\r\n                    },\r\n                    set: function (value) {\r\n                        this._contentType = value;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n\r\n\r\n                AuthenticatedHttp.prototype.ajax = function (request) {\r\n                    var deferred = new Microsoft.Utility.Deferred();\r\n\r\n                    var xhr = new XMLHttpRequest();\r\n\r\n                    if (!request.method) {\r\n                        request.method = 'GET';\r\n                    }\r\n\r\n                    xhr.open(request.method.toUpperCase(), request.requestUri, true);\r\n\r\n                    if (request.headers) {\r\n                        for (name in request.headers) {\r\n                            xhr.setRequestHeader(name, request.headers[name]);\r\n                        }\r\n                    }\r\n\r\n                    xhr.onreadystatechange = function (e) {\r\n                        if (xhr.readyState == 4) {\r\n                            if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\r\n                                deferred.resolve(xhr.responseText);\r\n                            } else {\r\n                                deferred.reject(xhr);\r\n                            }\r\n                        } else {\r\n                            deferred.notify(xhr.readyState);\r\n                        }\r\n                    };\r\n\r\n                    if (request.data) {\r\n                        if (typeof request.data === 'string') {\r\n                            xhr.send(request.data);\r\n                        } else {\r\n                            xhr.send(JSON.stringify(request.data));\r\n                        }\r\n                    } else {\r\n                        xhr.send();\r\n                    }\r\n\r\n                    return deferred;\r\n                };\r\n\r\n                AuthenticatedHttp.prototype.getUrl = function (url) {\r\n                    return this.request(new Request(url));\r\n                };\r\n\r\n                AuthenticatedHttp.prototype.postUrl = function (url, data) {\r\n                    return this.request(new Request(url, 'POST', data));\r\n                };\r\n\r\n                AuthenticatedHttp.prototype.deleteUrl = function (url) {\r\n                    return this.request(new Request(url, 'DELETE'));\r\n                };\r\n\r\n                AuthenticatedHttp.prototype.patchUrl = function (url, data) {\r\n                    return this.request(new Request(url, 'PATCH', data));\r\n                };\r\n\r\n                AuthenticatedHttp.prototype.request = function (request) {\r\n                    var _this = this;\r\n                    var deferred;\r\n\r\n                    this.augmentRequest(request);\r\n\r\n                    if (this._getAccessTokenFn) {\r\n                        deferred = new Microsoft.Utility.Deferred();\r\n\r\n                        this._getAccessTokenFn().then((function (token) {\r\n                            request.headers[\"Authorization\"] = 'Bearer ' + token;\r\n                            _this.ajax(request).then(deferred.resolve, deferred.reject);\r\n                        }).bind(this), deferred.reject);\r\n                    } else {\r\n                        deferred = this.ajax(request);\r\n                    }\r\n\r\n                    return deferred;\r\n                };\r\n\r\n                AuthenticatedHttp.prototype.augmentRequest = function (request) {\r\n                    if (!request.headers) {\r\n                        request.headers = {};\r\n                    }\r\n\r\n                    if (!request.headers['Accept']) {\r\n                        request.headers['Accept'] = this._accept;\r\n                    }\r\n\r\n                    if (!request.headers['Content-Type']) {\r\n                        request.headers['Content-Type'] = this._contentType;\r\n                    }\r\n\r\n                    if (request.disableCache || this._disableCache) {\r\n                        request.requestUri += (request.requestUri.indexOf('?') >= 0 ? '&' : '?') + '_=' + this._noCache++;\r\n                    }\r\n                };\r\n                return AuthenticatedHttp;\r\n            })();\r\n            HttpHelpers.AuthenticatedHttp = AuthenticatedHttp;\r\n        })(Utility.HttpHelpers || (Utility.HttpHelpers = {}));\r\n        var HttpHelpers = Utility.HttpHelpers;\r\n    })(Microsoft.Utility || (Microsoft.Utility = {}));\r\n    var Utility = Microsoft.Utility;\r\n})(Microsoft || (Microsoft = {}));\r\n//# sourceMappingURL=utility.js.map\r\n"}